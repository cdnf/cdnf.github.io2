<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>搜百谷</title>
  
  <subtitle>达则兼济天下尤物，科技改变世界嫩模！</subtitle>
  <link href="https://sobaigu.com/atom.xml" rel="self"/>
  
  <link href="https://sobaigu.com/"/>
  <updated>2024-05-25T07:03:04.000Z</updated>
  <id>https://sobaigu.com/</id>
  
  <author>
    <name>凹凸曼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站服务器使用360星图自动分析IIS日志，并通过网页浏览</title>
    <link href="https://sobaigu.com/windows-iis-log-with-360xingtu-webview.html"/>
    <id>https://sobaigu.com/windows-iis-log-with-360xingtu-webview.html</id>
    <published>2024-05-25T07:03:04.000Z</published>
    <updated>2024-05-25T07:03:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>最近刚好研究了 Windows Server IIS建站相关问题，做了些方便自己的小工作，友链里有网友写了篇比较好的教程，转载到本站以便后续参考。</p><p>有些小伙伴习惯使用 Windows Server，Windows 系统做网站服务器自然使用 IIS 作为网站服务端。由于 Windows Server 本身就是界面管理，所以网站管理套件相对薄弱一些，尤其是 IIS 日志分析更是没有几个简单易用的，其中日志分析360星图便是难得的有用工具。</p><h2 id="360星图日志分析"><a class="headerlink" href="#360星图日志分析"></a>360星图日志分析</h2><p>360星图360旗下开发的网站日志分析工具，使用360网站卫士核心数据分析模块，转化为全新的 Web 日志分析系统，深入分析黑客攻击行为和异常访问，比如 Web 漏洞攻击识别、CC攻击识别、恶意爬虫扫描识别、异常访问识别等。<br><img src="https://www.wubase.com/assets/image/360xingtu.webp" alt="通过网页浏览服务器上的IIS常规访问浏览报告" title="通过网页浏览服务器上的IIS常规访问浏览报告" loading="lazy"></p><p>360星图不止支持 IIS 日志，同时也能识别 apache 和 nginx，使用也比较简单，可以快速生成直观的日志报告。</p><h3 id="获取软件"><a class="headerlink" href="#获取软件"></a>获取软件</h3><p>可惜该软件早就不更新维护了，360网站卫士都要在2024年6月停服了，该软件涉及的分析规则还是加密的，可能要成为绝唱。</p><p>下载地址：<a href="http://file.wubase.com/f/56721529-1247275504-cbded6" title="网联基地下载">网联基地下载</a> | <a href="https://zmingcx.lanzoul.com/i9CIb0yaocvc" title="蓝奏云">蓝奏云</a> | <a href="https://pan.baidu.com/s/1MvOgNAL3bRCnjFUdWgLKSA?pwd=7joe" title="百度网盘">百度网盘</a> | <a href="https://www.moerats.com/usr/down/xingtu_full.zip" title="网友服务器">网友服务器</a></p><h3 id="配置使用"><a class="headerlink" href="#配置使用"></a>配置使用</h3><p>下载后解压到某目录，如 <code>C:\360xingtu</code>，然后按需对软件进行基本的配置 <code>.\conf\config.ini</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#日志文件存放路径，可以是直接目录也可以是文件，如：d:\logs\1.log 或 d:\logs\</span></span><br><span class="line"><span class="comment">#如果使用 d:\logs\ 的方式，并logs目录下存在其他文件夹则无法分析这些文件夹内的日志文件</span></span><br><span class="line">log_file:C:\inetpub\logs\LogFiles\W3SVC2</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志文件类型设置，1:自动识别iis/apache/nginx日志 2:自定义格式</span></span><br><span class="line">xingtu_logtype:1</span><br><span class="line"></span><br><span class="line"><span class="comment">#是否生成Html分析报告(包括常规报告及安全分析报告)，1:不开启;2:开启</span></span><br><span class="line">common_analysis:2</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认host,建议替换 default 为网站域名，不带http://</span></span><br><span class="line">host:default</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置接收运行通知的邮件：软件停服了别想了</span></span><br><span class="line">xingtu_email:</span><br><span class="line"></span><br><span class="line"><span class="comment">#是否作为定时任务，1:不作为定时任务;2:作为定时任务，只分析log_file指定目录下最新的日志文件</span></span><br><span class="line">schedule_analysis:2</span><br></pre></td></tr></table></figure><p>以上配置指定 IIS 日志文件夹，作为定时任务，其他的基本上没配置的必要，直接点击根目录下的 <code>bat</code> 启动器就可以用了，小网站分析一次最新日志要不了几秒就能出报告。</p><h2 id="实现网页浏览报告"><a class="headerlink" href="#实现网页浏览报告"></a>实现网页浏览报告</h2><p>360星图生成的报告保存在软件目录 <code>.\result</code> 下，且文件名比较长，本地打开倒没什么，但最好进行处理下方便实现外部网页浏览。</p><h3 id="添加IIS虚拟目录"><a class="headerlink" href="#添加IIS虚拟目录"></a>添加IIS虚拟目录</h3><p>打开 IIS 管理界面，新增个网站或者在某个网站上右键–》添加虚拟目录：<code>别名</code> 填自己喜欢的任何名字，如 <code>report</code>，<code>物理路径</code> 则指向360星图生成报告的 <code>result</code> 目录，点确定便完成了，这样便可以在服务器外通过网络访问目录下的报告。</p><h3 id="自动改名及修正js路径"><a class="headerlink" href="#自动改名及修正js路径"></a>自动改名及修正js路径</h3><p>360星图默认生成的报告文件文件名较长，且含有中文字符，为方便浏览，将报告处理成有一定规律的文件名，后期直接按规律输网页地址就能看。</p><p>因为360星图的报告源码中引用了 <code>/bin/</code> 路径资源，该路径名为敏感目录，直接用是不允许访问的，资源会出现 <code>404</code> 错误，所以需额外处理。为了方便处理，用了 BASH 相关命令功能，所以先在系统中安装个 Git 客户端。</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">path</span>=<span class="variable">%path%</span>;C:\Program Files\Git\usr\bin\;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git;</span><br><span class="line"><span class="built_in">set</span> WORKDIR=&quot;%~dp0&quot;</span><br><span class="line"><span class="built_in">set</span> LOGDIR=&quot;C:\<span class="number">360</span>xingtu\result&quot;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">%LOGDIR%</span></span><br><span class="line"><span class="built_in">start</span> git-bash &quot;<span class="variable">%WORKDIR%</span>\auto-name.sh&quot;</span><br></pre></td></tr></table></figure><p>以上 BAT 是 BASH 启动器，代码定义了报告路径和启动哪个 BASH。下方的 BASH 代码则实现修正 js 引用源和重命名报告文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">list=$(<span class="built_in">ls</span> u_ex*)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$&#123;list&#125;</span>; <span class="keyword">do</span></span><br><span class="line">    sed -i <span class="string">&quot;s/\.\.\/bin\/js\/jquery\.min\.js/\/\/cdn\.bootcdn\.net\/ajax\/libs\/jquery\/3\.7\.1\/jquery\.min\.js/g&quot;</span> <span class="variable">$item</span></span><br><span class="line">    sed -i <span class="string">&quot;s/\.\.\/bin\/js\/plug-in\.js/\/\/cdn\.bootcdn\.net\/ajax\/libs\/echarts\/5\.5\.0\/echarts\.js/g&quot;</span> <span class="variable">$item</span></span><br><span class="line">    suffix=<span class="variable">$&#123;item##*.&#125;</span></span><br><span class="line">    ex_name=$(<span class="built_in">echo</span> <span class="variable">$item</span> | grep <span class="string">&quot;安全&quot;</span>)</span><br><span class="line">    m_name=<span class="variable">$&#123;item:4:6&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;suffix&#125;</span> == <span class="string">&quot;txt&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">         t_name=<span class="variable">$&#123;m_name&#125;</span>_attacks.txt</span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$&#123;suffix&#125;</span> == <span class="string">&quot;html&quot;</span> &amp;&amp; <span class="variable">$&#123;ex_name&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">         t_name=<span class="variable">$&#123;m_name&#125;</span>_s.html</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         t_name=<span class="variable">$&#123;m_name&#125;</span>.html</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">mv</span> -f <span class="variable">$item</span> <span class="variable">$t_name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行完后，<code>result</code> 目录下的文件将会命名为 <code>240519.html</code> 之类的文件。那么在外部浏览器地址中输入：<code>服务器域名或IP/report/240519.html</code> 就能浏览报告了。<br><img src="https://www.wubase.com/assets/image/360xingtu_sec.webp" alt="通过网页浏览服务器上的IIS报告分析网站被攻击情况" title="通过网页浏览服务器上的IIS报告分析网站被攻击情况" loading="lazy"></p><h2 id="添加系统定时任务"><a class="headerlink" href="#添加系统定时任务"></a>添加系统定时任务</h2><p>为了让服务器自动生成报告和自动处理，将360星图和我们做好的自动处理 BAT 添加到系统定时任务，每天报告一次就行。</p><p>因为 IIS 使用 <code>W3C</code> 格式生成日志，日志中的时间为 UTC 时间，如果你服务器上使用的北京时间，那么日志中记录的时间要加8小时才是北京时间。为了减少思考，干脆取消 IIS <code>使用本地时间进行支件命名和滚动更新(U)</code>，这样生成的文件和时间都与 UTC 同步：</p><ul><li>让定时任务每日 <code>07:59:59</code> 执行 360星图启动器 <code>cron.bat</code>，这样刚好就能分析过去24小时的日志</li><li>晚几分钟启动我们前面做好的 BASH 启动器，如：<code>auto-name.bat</code>，具体时间自己调保证360星图统计报告已完成即可</li></ul><p>如此，每日北京时间八点十几分就能在外网通过浏览器查看过去24小时的网站报告，比登录服务器本地浏览网页舒服多了。</p><h2 id="转载来源"><a class="headerlink" href="#转载来源"></a>转载来源</h2><ol><li><a href="https://www.wubase.com/instruct/windows-iis-log-with-360xingtu-webview/" title="网站服务器使用360星图自动分析IIS日志，并通过网页浏览的保姆级教程">网站服务器使用360星图自动分析IIS日志，并通过网页浏览的保姆级教程</a></li><li><a href="https://sobaigu.com/webhook-install-as-service-in-windows-server.html" title="Windows Server 部署 webhook 服务，并注册为系统服务守护">Windows Server 部署 webhook 服务，并注册为系统服务守护</a></li></ol>]]></content>
    
    
    <summary type="html">有些小伙伴习惯使用 Windows Server，Windows 系统做网站服务器自然使用 IIS 作为网站服务端。由于 Windows Server 本身就是界面管理，所以网站管理套件相对薄弱一些，尤其是 IIS 日志分析更是没有几个简单易用的，其中日志分析360星图便是难得的有用工具</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://sobaigu.com/tags/Windows/"/>
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server 部署 webhook 服务，并注册为系统服务守护</title>
    <link href="https://sobaigu.com/webhook-install-as-service-in-windows-server.html"/>
    <id>https://sobaigu.com/webhook-install-as-service-in-windows-server.html</id>
    <published>2024-05-17T10:30:35.000Z</published>
    <updated>2024-05-17T10:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>之前受某位友链大佬<a href="https://www.wubase.com/instruct/yuming-beian-chuli/" title="域名备案不让解析怎么办？备案怎么不影响搜索引擎收录？备案期间的3种处理方案">针对搜索引擎解析域名</a>文章思路的启发，用闲置的小水管机做了个搜索引擎喂料方案。</p><p>为了图省事，直接用的 Windows 系统定时任务运行<a href="/bat-git-clone-auto-public.html" title="一个BAT批处理实现HTML网页自动同步发布到Windows Server">自动克隆代码仓库BAT</a>，按固定的时间无脑从 GitHub 克隆仓库后发布。这样的方案确实省事，但也没法办法及时同步仓库中最新代码，因为还有个地方会自动将最新链接提交搜索引擎，这期间存在更新时间差，而且无更新时浪费小水管机流量资源。</p><p>故近日在小水管机上又加了个 <code>webhook</code> 监听程序，实现按需无时差同步代码。</p><h2 id="需要用到的组件"><a class="headerlink" href="#需要用到的组件"></a>需要用到的组件</h2><ol><li>webhook监听服务端：开源Go项目 <a href="https://github.com/adnanh/webhook" title="webhook监听服务端，go开源项目">webhook</a>，可自行编译也可以直接下载对应二进制程序</li><li>Windows服务管理：这里用的 <a href="https://github.com/winsw/winsw" title="第三方 Windows 服务管理程序">Windows Service Wrapper</a>，见后文参考链接，不用第三方用 Windows 自己的服务注册方式也是可以的，目的只是为了将程序注册成系统服务守护，能实现目的就行</li><li>端口测试「可选」：telnet 或者 <a href="https://github.com/cloverstd/tcping" title="可以探测tcp端口的ping">tcping</a> 之类的都行</li></ol><h2 id="功能实现流程"><a class="headerlink" href="#功能实现流程"></a>功能实现流程</h2><pre class="mermaid">sequenceDiagram  actor Git客户端  Git客户端->>GitHub仓库: git push  GitHub仓库->>webhook监听端: 触发webhook  webhook监听端->>BAT: 运行预定程序  Note right of BAT: 自动 pull/clone及发布  webhook监听端-->>GitHub仓库: 返回webhook结果  GitHub仓库-->>Git客户端: git pull</pre><script type="text/javascript" async  src="https://cdn.staticfile.org/mermaid/10.9.1/mermaid.min.js"></script><h2 id="Windows-Server-部署-webhook-监听服务"><a class="headerlink" href="#Windows-Server-部署-webhook-监听服务"></a>Windows Server 部署 webhook 监听服务</h2><p>本来要实现自动按需更新部署的功能在 LInux 服务器上很容易就实现，这部分可见本站早期教程：<a href="/Hexo-git-to-vps.html#Git%E8%AE%BE%E7%BD%AE" title="Hexo博客Git-VPS部署完整记录">Hexo博客Git-VPS部署完整记录</a>。</p><p>或者可以安装个宝塔之类的再借助扩展功能也能容易实现，在纯 Windows Server 上稍微复杂一点，下面是实现步骤。</p><h3 id="获取-webhook-监听程序"><a class="headerlink" href="#获取-webhook-监听程序"></a>获取 webhook 监听程序</h3><p>使用开源 Go 项目 webhook，可以自己编译，也可以直接下载作者已经编译好的二进制版本，Windows 下载 <a href="https://github.com/adnanh/webhook/releases/download/2.8.1/webhook-windows-amd64.tar.gz" title="Windows X64 版本">webhook-windows-amd64.tar.gz</a> 解压到某个路径，如：<code>C:\inetpub\webhook\webhook.exe</code>。</p><h3 id="配置监听端-webhook-xml"><a class="headerlink" href="#配置监听端-webhook-xml"></a>配置监听端 <code>webhook.xml</code></h3><p>监听端就是我们要部署在我们自己 Windows Server 上的服务，<code>webhook.xml</code> 中定义监听接口数据来源，对接口令，匹配条件等，以下是一个最简单的样本：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auto-git</span></span><br><span class="line">  <span class="attr">execute-command:</span> <span class="string">&quot;C:/inetpub/auto-git.bat&quot;</span> <span class="comment"># 要执行的程序</span></span><br><span class="line">  <span class="attr">command-working-directory:</span> <span class="string">&quot;C:/inetpub&quot;</span> <span class="comment"># 执行程序工作目录</span></span><br><span class="line">  <span class="attr">response-message:</span> <span class="string">Got</span> <span class="string">the</span> <span class="string">payload!</span> <span class="comment"># 执行后返回给发起端的信息</span></span><br><span class="line">  <span class="attr">response-headers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Access-Control-Allow-Origin</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">incomingpayload-content-type:</span> <span class="string">application/json</span></span><br><span class="line">  <span class="attr">trigger-rule:</span></span><br><span class="line">    <span class="attr">and:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">payload-hmac-sha1</span></span><br><span class="line">        <span class="attr">secret:</span> <span class="string">&quot;YOURSECRET&quot;</span> <span class="comment"># 设置一个对接口令</span></span><br><span class="line">        <span class="attr">parameter:</span></span><br><span class="line">          <span class="attr">source:</span> <span class="string">header</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">X-Hub-Signature</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">value</span></span><br><span class="line">        <span class="attr">value:</span> <span class="string">refs/heads/main</span> <span class="comment"># 触发这个webhook的来源分支名</span></span><br><span class="line">        <span class="attr">parameter:</span></span><br><span class="line">          <span class="attr">source:</span> <span class="string">payload</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">ref</span></span><br></pre></td></tr></table></figure><p>以上是 <code>yaml</code> 格式样板，<code>JSON</code> 格式大同小异，注意执行程序路径使用 <code>/</code> 符号，否则会有一个错误，要执行的 BAT 可见本站另外教程：<a href="/bat-git-clone-auto-public.html" title="一个BAT批处理实现HTML网页自动同步发布到Windows Server">一个BAT批处理实现HTML网页自动同步发布到Windows Server</a>。</p><h3 id="运行-webhook-测试"><a class="headerlink" href="#运行-webhook-测试"></a>运行 webhook 测试</h3><p>以上配置完成后，打开 <code>powershell</code> 或 <code>cmd</code>，执行以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">cmd</span> 不同盘符切换路径需带 /d 参数</span><br><span class="line"><span class="built_in">cd</span> C:\inetpub\webhook\</span><br><span class="line"># 切换到程序所在路径</span><br><span class="line">webhook.exe -hooks webhook.yaml -verbose</span><br></pre></td></tr></table></figure><p>如果开启了 Windows defender 防火墙，默认会提示是否放行 <code>webhook.exe</code>，如果没提示请在防火墙中添加程序或者 <code>TCP: 9000</code> 端口允许入站连接，控制台将显示如下结果，表示监听配置没错，这个 <code>webhook</code> 服务就搭建成功了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[webhook] 2024/05/17 08:19:55 version 2.8.1 starting</span><br><span class="line">[webhook] 2024/05/17 08:19:55 attempting to load hooks from webhook.yaml</span><br><span class="line">[webhook] 2024/05/17 08:19:55 found 1 hook(s) in file</span><br><span class="line">[webhook] 2024/05/17 08:19:55 loaded: auto-git</span><br><span class="line">[webhook] 2024/05/17 08:19:55 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br></pre></td></tr></table></figure><p><code>hook</code> 地址中的 <code>&#123;id&#125;</code> 为配置监听端 <code>webhook.xml</code> 中定义的  <code>auto-git</code>，假设 Windows Server 服务器公网 IP 为 <code>1.2.4.8</code> 或者将域名 <code>x.y.z</code> 解析到了该公网 IP，那么我们这个服务器上完整的 <code>webhook</code> 调用地址可以为：</p><ul><li><code>http://1.2.4.8:9000/hooks/auto-git</code></li><li><code>http://x.y.z:9000/hooks/auto-git</code></li></ul><p>在外网调用时，一般还需要在云服务器控制台安全组中放行 <code>TCP: 9000</code> 端口，然后在调用端使用以上 <code>webhook</code> 地址中的任何一个都可以。</p><p>测试端口是否正常可用 <code>tcping</code>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\xxx&gt; tcping x.y.z <span class="number">9000</span></span><br><span class="line"><span class="built_in">Ping</span> tcp://x.y.z:<span class="number">9000</span>(<span class="number">1</span>.<span class="number">2</span>.<span class="number">4</span>.<span class="number">8</span>:<span class="number">9000</span>) - Connected - <span class="built_in">time</span>=<span class="number">48</span>.<span class="number">4695</span>ms</span><br></pre></td></tr></table></figure><blockquote><p>此处如果控制台输出中文乱码，可以运行 <code>chcp 65001</code> 再启动 <code>webhook</code> 监听查看，<br><code>65001</code> 代表编码方式为 <code>utf-8</code>，更多可以查看文末参考链接</p></blockquote><h3 id="注册系统服务守护"><a class="headerlink" href="#注册系统服务守护"></a>注册系统服务守护</h3><p>监听服务运行没问题那基本上可以注册成服务守护来运行监听了，这里使用 <a href="https://github.com/winsw/winsw" title="第三方 Windows 服务管理程序">Windows Service Wrapper</a> 来完成。</p><p>直接在项目仓库 release 中找到 <code>WinSW-x64.exe</code> 下载到我们的 Windows Server 上，比如放到 <code>webhook</code> 同目录并改个顺眼的名字：<code>webhookservice.exe</code>，新建同名配置：<code>webhookservice.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>auto-git<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>WebHook<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>GitHub WebHook<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executable</span>&gt;</span>C:\inetpub\webhook\webhook.exe<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>-hooks webhook.yaml -verbose<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">logmode</span>&gt;</span>reset<span class="tag">&lt;/<span class="name">logmode</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">onfailure</span> <span class="attr">action</span>=<span class="string">&quot;restart&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置保存后运行安装服务命令：<code>webhookservice.exe install</code> 就会将 <code>C:\inetpub\webhook\webhook.exe</code> 安装成服务，并且带参数 <code>-hooks webhook.yaml -verbose</code> 启动。</p><p>启动后会在同目录下生成几个对应日志文件，可以自行查看服务运行状态及调用记录。</p><p><code>webhookservice.exe</code> 可以管理该服务，其命令参数如下：</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>install</td><td>Installs the service.</td></tr><tr><td>uninstall</td><td>Uninstalls the service.</td></tr><tr><td>start</td><td>Starts the service.</td></tr><tr><td>stop</td><td>Stops the service.</td></tr><tr><td>restart</td><td>Stops and then starts the service.</td></tr><tr><td>status</td><td>Checks the status of the service.</td></tr><tr><td>refresh</td><td>Refreshes trties without reinstallation.</td></tr><tr><td>customize</td><td>Customizes the wrapper executable.</td></tr><tr><td>dev</td><td>Experimental commands.</td></tr></tbody></table><h2 id="配置-webhook-调用端"><a class="headerlink" href="#配置-webhook-调用端"></a>配置 webhook 调用端</h2><p>如前文所示，该 <code>webhook</code> 目的就是为了 GitHub 仓库自动同步，我们自己 Windows Server 上 <code>webhook</code> 监听服务已经万事俱备。</p><p>接下来需要打开 GitHub 上要触发 <code>webhook</code> 的仓库 <code>setting</code>》<code>Webhooks</code>》点击右上角的 <code>add webhook</code>：新增一个 <code>webhook</code> 调用：</p><p><img src="../images/github-webhook.webp" alt="GitHub添加调用端webhook" loading="lazy"></p><ul><li><code>Payload URL</code>：指向服务器的域名或者直接IP，前文提到的 <a href="#%E8%BF%90%E8%A1%8C-webhook-%E6%B5%8B%E8%AF%95">webhook 地址</a></li><li><code>Content type</code>：选择 <code>application/json</code></li><li><code>Secret</code>：设置的口令，需与监听端配置的相同</li></ul><p>添加 <code>webhook</code> 后，默认会触发一次测试调用，<code>Response 200</code> 表示调用成功。至此，整套 hook 环节已经全部打通。</p><h2 id="系统运行结果"><a class="headerlink" href="#系统运行结果"></a>系统运行结果</h2><p>在 GitHub 仓库 <code>webhooks</code> 列表中，可见每个 <code>webhook</code> 的调用结果，点击某个进入管理界面，可见 <code>Recent Deliveries</code>，这里保存了每一次的调用记录：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Headers</span></span><br><span class="line">  <span class="attribute">Access</span>-Control-<span class="literal">Allow</span>-Origin: *</span><br><span class="line">  <span class="attribute">Content</span>-Length: <span class="number">16</span></span><br><span class="line">  <span class="attribute">Content</span>-Type: text/plain; charset=utf-<span class="number">8</span></span><br><span class="line">  <span class="attribute">Date</span>: Fri, <span class="number">17</span> May <span class="number">2024</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">14</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">Body</span></span><br><span class="line">  <span class="attribute">Got</span> the payload!</span><br></pre></td></tr></table></figure><p>如果失败，也可以查看具体的失败代码，<code>Response 502</code> 表示服务端异常，可以用上文提到的方法测试查找问题所在。</p><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/adnanh/webhook" title="webhook监听服务端，go开源项目">webhook</a></li><li><a href="https://github.com/winsw/winsw" title="第三方 Windows 服务管理程序">Windows Service Wrapper</a></li><li><a href="https://www.cnblogs.com/wangxingwei/p/14874673.html">windows+webhook+github自动化部署</a></li><li><a href="https://www.wxy97.com/archives/39">让Windows程序运行为服务</a></li><li><a href="https://blog.csdn.net/baidu_24752135/article/details/105877599">怎样解决CMD命令行窗口中文乱码问题</a></li></ol>]]></content>
    
    
    <summary type="html">之前受某位友链大佬针对搜索引擎解析域名文章思路的启发，用闲置的小水管机做了个搜索引擎喂料方案。
为了图省事，直接用的 Windows 系统定时任务运行自动克隆代码仓库BAT，按固定的时间无脑从 GitHub 克隆仓库后发布。这样的方案确实省事，但也没法办法及时同步仓库中最新代码，因为还有个地方会自动将最新链接提交搜索引擎，这期间存在更新时间差，而且无更新时浪费小水管机流量资源。
故近日在小水管机上又加了个 `webhook` 监听程序，实现按需无时差同步代码。</summary>
    
    
    
    <category term="搞软件" scheme="https://sobaigu.com/categories/%E6%90%9E%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>解决 IIS W3C格式日志中中文路径乱码问题</title>
    <link href="https://sobaigu.com/iis-charset-chinese.html"/>
    <id>https://sobaigu.com/iis-charset-chinese.html</id>
    <published>2024-05-13T00:56:55.000Z</published>
    <updated>2024-05-16T11:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>之前得到友链大佬 <a href="https://www.wubase.com/" title="网联基地 - 云服务器评测,分享国内外VPS,网站服务器等最新优惠折扣信息">网联基地</a> 关于 <a href="https://www.wubase.com/instruct/yuming-beian-chuli/" title="域名备案不让解析怎么办？备案怎么不影响搜索引擎收录？备案期间的3种处理方案">域名备案期间处理方案中针对搜索引擎做单独解析</a> 的启发，写了个 <a href="/bat-git-clone-auto-public.html" title="一个BAT批处理实现HTML网页自动同步发布到Windows Server">自动同步网站的批处理</a> 把小站在小水管机上放了一份，是个 Windows Server，所以自然而然用的 IIS 作为网站服务端程序。IIS虽然是微软的亲儿子，但习惯了 nginx、caddy等网站程序来说，IIS 真的有点不适应，有些设计甚至有点反人类。</p><p>好在只是个给搜索引擎喂料的应用， IIS10 装完做了只基本的设置就投入上线使用了，使用中发现输出的日志如果有中文出现了乱码，网络上有关这个问题的解决方案几乎没有，或者没有一篇说到点子上。</p><h2 id="IIS10-输出-W3C-格式日志中文乱码"><a class="headerlink" href="#IIS10-输出-W3C-格式日志中文乱码"></a>IIS10 输出 W3C 格式日志中文乱码</h2><p>因为网页源码已经指定了 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>，所以浏览器访问中文内容或者中文路径是没问题的，但输出的日志显示中文路径出现了乱码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-12 08:45:56 GET /tags/淇勭綏鏂疺PS/ - 443 101.43.47.44 Googlebot - 200 21192 168 64</span><br></pre></td></tr></table></figure><p>虽然这乱码貌似也没什么影响，但总归不知道这乱码具体内容是什么，搜索引擎爬取的是什么也不知道，也不知道正确与否。</p><blockquote><p>乱码也分原始输出乱码和编辑器编码错误，如 <code>notepad2</code> 按 <code>F8</code> 尝试 <code>UTF-8</code> 等重新编码确认是不是原始乱码问题。如果是编辑器解码错乱那换编辑器或指定正确编码就可以了</p></blockquote><h2 id="解决日志中文乱码"><a class="headerlink" href="#解决日志中文乱码"></a>解决日志中文乱码</h2><p>这个乱码问题不是出在网页，而是 IIS10 的日志输出，所以需要额外处理。</p><p>首先打开IIS》定位到自己服务器》双击 <code>日志</code>，日志文件编码选择 <code>UTF-8</code>，然后从右侧：操作》管理服务器》<code>重新启动</code>（不是重启服务器），如果不能解决问题接着往下看。</p><p>网上教程没有人提及过日志输出 W3C 格式时乱码的问题，自然也没有解决方案。倒是有些提及网站乱码的解决方案：<code>全局设置解码方式</code>。</p><p>在既有的教程中，多半是有个 <code>iis站点主页 .NET 全球化</code> 的设置入口，但站长Windows Server 2022 上的 IIS10 版本没有安装 <code>.net</code> 组件，自然就没有这个入口，我们采用直接修改网站配置文件的方式来达到目的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">globalization</span> <span class="attr">requestEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">responseEncoding</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将以上配置代码添加到网站配置：<code>web.cofig</code>，保存后重启网站，再查看 IIS 日志中有关中文的部分发现正常了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-12 09:35:38 GET /tags/美国VPS/ - 443 101.43.47.44 Googlebot - 200 19447 159 62</span><br></pre></td></tr></table></figure><h2 id="IIS10网站配置样本：web-cofig"><a class="headerlink" href="#IIS10网站配置样本：web-cofig"></a>IIS10网站配置样本：<code>web.cofig</code></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">globalization</span> <span class="attr">requestEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">responseEncoding</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultDocument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clear</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">value</span>=<span class="string">&quot;index.html&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultDocument</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">&quot;.webp&quot;</span> <span class="attr">mimeType</span>=<span class="string">&quot;image/webp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://www.wubase.com/instruct/yuming-beian-chuli/" title="域名备案不让解析怎么办？备案怎么不影响搜索引擎收录？备案期间的3种处理方案">域名备案不让解析怎么办？备案怎么不影响搜索引擎收录？备案期间的3种处理方案</a></li><li><a href="https://www.cnblogs.com/zhaokunbokeyuan256/p/10001726.html" title="iis 站点中文乱码 解决方案">iis 站点中文乱码 解决方案</a></li></ol>]]></content>
    
    
    <summary type="html">之前得到友链大佬 网联基地 关于 域名备案期间处理方案中针对搜索引擎做单独解析 的启发，写了个 自动同步网站的批处理 把小站在小水管机上放了一份，是个 Windows Server，所以自然而然用的 IIS 作为网站服务端程序。IIS虽然是微软的亲儿子，但习惯了 nginx、caddy等网站程序来说，IIS 真的有点不适应，有些设计甚至有点反人类。
好在只是个给搜索引擎喂料的应用， IIS10 装完做了只基本的设置就投入上线使用了，使用中发现输出的日志如果有中文出现了乱码，网络上有关这个问题的解决方案几乎没有，或者没有一篇说到点子上。 </summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://sobaigu.com/tags/Windows/"/>
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>一个BAT批处理实现HTML网页自动同步发布到Windows Server</title>
    <link href="https://sobaigu.com/bat-git-clone-auto-public.html"/>
    <id>https://sobaigu.com/bat-git-clone-auto-public.html</id>
    <published>2024-05-11T13:39:18.000Z</published>
    <updated>2024-05-11T13:39:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>最近搞了个 Windows Server，除了挂几个客户端，平常也闲置得很，每个月 400G 的流量都用不到十分之一。刚好看了友链里大佬的一篇关于 <a href="https://www.wubase.com/instruct/yuming-beian-chuli/" title="域名备案不让解析怎么办？备案怎么不影响搜索引擎收录？备案期间的3种处理方案">针对搜索引擎解析域名</a> 的方法，有种不妨一试的冲动。</p><p>从原理上讲，这种专门给大陆搜索引擎喂料的方法应该是有利于 SEO 的，毕竟：独立 IP 没有垃圾邻居，内网低延迟，反正服务器闲着也是闲着。</p><span id="more"></span><h2 id="适用场景"><a class="headerlink" href="#适用场景"></a>适用场景</h2><p>因为是个 Windows Server，上面还挂着一些客户端程序，所以想着尽量节省资源，这个 Windows Server 上只托管最终的 <code>HTML</code> 文件，一些渲染等工作就用 <code>GitHub Action</code> 完成。因为不怎么考虑时效性，所以也就没有再搭个消息钩子系统触发更新的功能，这个BAT工作就简单两步：</p><ol><li>定时触发自动任务，从 <code>GitHub</code> 仓库拉取最新HTML</li><li>拉取成功则自动发布到 <code>iis</code> 网站目录</li></ol><blockquote><p>更完善的 <code>webhook</code> 结合方案可见本站另外的呕心之作：<br><a href="/webhook-install-as-service-in-windows-server.html" title="Windows Server 部署 webhook 服务，并注册为系统服务守护">Windows Server 部署 webhook 服务，并注册为系统服务守护</a></p></blockquote><h2 id="前置条件"><a class="headerlink" href="#前置条件"></a>前置条件</h2><ol><li>安装 <code>Git for Windows</code></li><li>安装 <code>iis</code> 并配置好网站</li><li>做好 <code>dns</code> 解析</li><li>将 <code>BAT</code> 添加到 Windows 自动任务，按需求定时触发启动 <code>BAT</code> 程序</li></ol><h2 id="BAT实现代码"><a class="headerlink" href="#BAT实现代码"></a>BAT实现代码</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">ECHO</span> OFF</span><br><span class="line">:SETVAR</span><br><span class="line"><span class="built_in">SET</span> <span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;C:\Program Files\Git;C:\Program Files\Git\bin;</span><br><span class="line"><span class="built_in">SET</span> WWW_DIR=&quot;C:\inetpub\xxx&quot;</span><br><span class="line"><span class="built_in">SET</span> NUM=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">:CLONE</span><br><span class="line"><span class="built_in">RMDIR</span> /S /Q GITTMP</span><br><span class="line"><span class="built_in">PING</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -n <span class="number">3</span> &gt;<span class="built_in">nul</span></span><br><span class="line">git clone -b xxx https://github.com/xxx/xxx.github.io.git GITTMP</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> <span class="variable">%errorlevel%</span>==<span class="number">0</span> (</span><br><span class="line">  <span class="keyword">GOTO</span> PUBLISH</span><br><span class="line">)  <span class="keyword">ELSE</span>  (</span><br><span class="line">  <span class="built_in">SET</span> /A NUM+=<span class="number">1</span></span><br><span class="line">  <span class="built_in">ECHO</span> <span class="variable">%date%</span><span class="variable">%time%</span>Git clone failed <span class="variable">%NUM%</span> . &gt;&gt;auto-xxx.log</span><br><span class="line">  <span class="keyword">IF</span> <span class="variable">%NUM%</span>==<span class="number">3</span> <span class="keyword">goto</span> END</span><br><span class="line">  <span class="built_in">PING</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -n <span class="number">300</span> &gt;<span class="built_in">nul</span></span><br><span class="line">  <span class="keyword">GOTO</span> CLONE</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:PUBLISH</span><br><span class="line"><span class="built_in">MOVE</span> /Y <span class="variable">%WWW_DIR%</span>\web.config .\</span><br><span class="line"><span class="built_in">RMDIR</span> /S /Q <span class="variable">%WWW_DIR%</span></span><br><span class="line"><span class="built_in">PING</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -n <span class="number">3</span> &gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">MOVE</span> /Y  GITTMP <span class="variable">%WWW_DIR%</span> &amp;&amp; <span class="built_in">MOVE</span> /Y  web.config <span class="variable">%WWW_DIR%</span></span><br><span class="line"><span class="built_in">ECHO</span> <span class="variable">%date%</span><span class="variable">%time%</span>Auto publish has done. &gt;&gt;auto-xxx.log</span><br><span class="line"></span><br><span class="line">:END</span><br><span class="line"><span class="keyword">EXIT</span></span><br></pre></td></tr></table></figure><h2 id="代码解释"><a class="headerlink" href="#代码解释"></a>代码解释</h2><ol><li><p>为什么不是 <code>git pull</code>？</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b xxx https://github.com/xxx/xxx.github.io.git</span><br></pre></td></tr></table></figure><p>因为站长用的是 <code>hexo</code> 渲染框架，<code>GitHub Action</code> 设置了发布分支 <code>xxx</code> 只保留一次 <code>commit</code> 记录，每次都没有承前启后的关系，所以只能用 <code>git clone</code></p></li><li><p><code>%WWW_DIR%</code> 是什么？</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SET</span> WWW_DIR=&quot;C:\inetpub\xxx&quot;</span><br></pre></td></tr></table></figure><p><code>iis</code> 中设置的网站目录，HTML文件需发布到该路径对外提供访问</p></li><li><p>为什么要<code>MOVE web.config</code><br><code>web.config</code> 是 <code>iis</code> 的网站配置文件，所以这个配置文件需要保留恢复。网站配置内容见本站后续文章：<a href="/iis-charset-chinese.html" title="解决 IIS W3C格式日志中中文路径乱码问题">解决 IIS W3C格式日志中中文路径乱码问题</a></p></li></ol>]]></content>
    
    
    <summary type="html">最近搞了个 Windows Server，除了挂几个客户端，平常也闲置得很，每个月 400 G的流量都用不到十分之一。刚好看了友链里大佬的一篇关于针对搜索引擎解析域名的方法，有种不妨一试的冲动。
从原理上讲，这种专门给大陆搜索引擎喂料的方法应该是有利于 SEO 的，毕竟：独立 IP 没有垃圾邻居，内网低延迟，反正服务器闲着也是闲着。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>解决Windows服务器开一段时间edge浏览器就 DNS_PROBE_STARTED 错误</title>
    <link href="https://sobaigu.com/DNS-PROBE-STARTED-issue-on-edge-in-windows-server.html"/>
    <id>https://sobaigu.com/DNS-PROBE-STARTED-issue-on-edge-in-windows-server.html</id>
    <published>2024-04-10T05:27:48.000Z</published>
    <updated>2024-04-10T05:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>近日逛网友提交的网站，发现华为云服务器搞活动，<a href="https://www.wubase.com/huawei/offers/" title="这么便宜看着看着就想买">只要46元就能买个云服务器玩一年</a>，就忍不住顺手买了个……</p><p>这2G2H配置着实不低，自然是要上Windows server，反正国内Windows系统和Linux一个价格，弄个远程桌面挂QQ，挂浏览器确实爽歪歪。挂着挂着发现第二天浏览器打不开网站了……</p><span id="more"></span><h2 id="现象"><a class="headerlink" href="#现象"></a>现象</h2><p>长时间挂机后，浏览器内无法访问任何网页：</p><ul><li>大名鼎鼎的 <code>baidu.com</code> 都打不开，提示DNS_PROBE_STARTED、time_out等等，都是关于dns解析错误的</li><li>powershell中 <code>ping baidu.com</code> 能正常解析，也能正常返回值</li><li>更换dns，<code>ipconfig /flushdns</code> 没任何两样</li><li>重启浏览器也无济于事</li><li>重启系统后能正常打开网站，但挂一会儿又不行了</li></ul><h2 id="解决：取消-使用安全的DNS指定如何查找网站的网络地址"><a class="headerlink" href="#解决：取消-使用安全的DNS指定如何查找网站的网络地址"></a>解决：取消 <code>使用安全的DNS指定如何查找网站的网络地址</code></h2><p>也不知道什么时候开启了 <code>使用安全的DNS指定如何查找网站的网络地址</code>，在edge设置中关闭该功能：<br>edge设置》隐私、搜索和服务》往下翻找到：安全》将 <code>使用安全的DNS指定如何查找网站的网络地址</code> 右侧的开关点灭</p><p>再次打开大名鼎鼎的百度，顺利打开网页，一切恢复正常。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;近日逛网友提交的网站，发现华为云服务器搞活动，&lt;a href=&quot;https://www.wubase.com/huawei/offers/&quot; title=&quot;这么便宜看着看着就想买&quot;&gt;只要46元就能买个云服务器玩一年&lt;/a&gt;，就忍不住顺手买了个……&lt;/p&gt;
&lt;p&gt;这2G2H配置着实不低，自然是要上Windows server，反正国内Windows系统和Linux一个价格，弄个远程桌面挂QQ，挂浏览器确实爽歪歪。挂着挂着发现第二天浏览器打不开网站了……&lt;/p&gt;</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Windows" scheme="https://sobaigu.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>最新搜索引擎蜘蛛机器人User Agent名称</title>
    <link href="https://sobaigu.com/bot-spider-names.html"/>
    <id>https://sobaigu.com/bot-spider-names.html</id>
    <published>2024-04-02T05:11:40.000Z</published>
    <updated>2024-04-02T05:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>重新整理了当前各搜索引擎的蜘蛛机器人爬虫名称，方便设置waf规则。</p><span id="more"></span><table><thead><tr><th>搜索引擎</th><th>名称</th><th>蜘蛛机器人名称</th><th>备注</th></tr></thead><tbody><tr><td><a href="http://google.com">google.com</a></td><td>Google</td><td>Googlebot，Googlebot-Image，Google-Read-Aloud，Googlebot-Video</td><td>美国</td></tr><tr><td><a href="http://bing.com">bing.com</a></td><td>Bing</td><td>bingbot，BingPreview</td><td>美国</td></tr><tr><td><a href="http://msn.com">msn.com</a></td><td>MSN</td><td>msnbot，msnbot-media</td><td>美国</td></tr><tr><td><a href="http://yahoo.com">yahoo.com</a></td><td>Yahoo</td><td>Yahoo! Slurp China，Yahoo</td><td>美国</td></tr><tr><td><a href="http://yandex.com">yandex.com</a></td><td>Yandex</td><td>YandexBot</td><td>俄罗斯</td></tr><tr><td><a href="http://baidu.com">baidu.com</a></td><td>百度</td><td>Baiduspider，Baiduspider-image，baiduboxapp，Baiduspider-render</td><td>中国</td></tr><tr><td><a href="http://so.com">so.com</a></td><td>360搜索</td><td>360Spider</td><td>中国</td></tr><tr><td><a href="http://sogou.com">sogou.com</a></td><td>搜狗</td><td>SogouSpider，Sogou web spider</td><td>中国</td></tr><tr><td><a href="http://toutiao.com">toutiao.com</a></td><td>头条</td><td>Bytespider</td><td>中国</td></tr><tr><td><a href="http://sm.cn">sm.cn</a></td><td>神马</td><td>YisouSpider</td><td>中国</td></tr><tr><td><a href="http://soso.com">soso.com</a></td><td>搜搜</td><td>sosospider</td><td>中国</td></tr></tbody></table><p>有些名称没办法一一查证，先记录以便后续使用，可以对比以前收集的资料：<a href="/2018-10-search-engine-names-for-seo.html">各大搜索引擎蜘蛛名称『转』</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;重新整理了当前各搜索引擎的蜘蛛机器人爬虫名称，方便设置waf规则。&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>常用 linux jq 命令语法整理</title>
    <link href="https://sobaigu.com/linux-jq-syntax-list.html"/>
    <id>https://sobaigu.com/linux-jq-syntax-list.html</id>
    <published>2024-01-27T02:19:36.000Z</published>
    <updated>2024-01-27T02:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期准备对 <a href="/xrayr-auto-shell-for-v2board.html">自用的一个 shell</a> 进行完善，有些增删改应该用 <code>jq</code> 来做应该事半功倍一点，将之前整理的一些资料一并做整理做个记录，方便后续查找学习。</p><span id="more"></span><h2 id="语法命令对照表"><a class="headerlink" href="#语法命令对照表"></a>语法命令对照表</h2><table><thead><tr><th style="text-align:left"><strong>语法</strong></th><th>json</th><th>命令</th><th>result str</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>.</strong></td><td>“Hello, world!”</td><td>jq ‘.’</td><td>“Hello, world!”</td><td></td></tr><tr><td style="text-align:left"></td><td>{“foo”: 42, “bar”: “less interesting data”}</td><td>jq ‘.foo’</td><td>42</td><td>返回对象foo key 值</td></tr><tr><td style="text-align:left"></td><td>{“notfoo”: true, “alsonotfoo”: false}</td><td>jq ‘.foo’</td><td>null</td><td>对象key不存在，返回null</td></tr><tr><td style="text-align:left"><strong>.[]</strong></td><td>[1,2,3]</td><td>jq ‘.[]’</td><td>1<br> 2 <br> 3</td><td>元素遍历</td></tr><tr><td style="text-align:left"></td><td>{“a”: 1, “b”: 2}</td><td>jq ‘.[]’</td><td>1 <br>2</td><td>key 对值遍历</td></tr><tr><td style="text-align:left"><strong>.[&lt;string&gt;]</strong></td><td>{“foo”: 42}</td><td>jq .[“foo”]</td><td>42</td><td>获取key 对应值</td></tr><tr><td style="text-align:left"><strong>.[&lt;value&gt;]</strong></td><td>[{“name”:“JSON”, “good”:true}, {“name”:“XML”, “good”:false}]</td><td>jq ‘.[0]’</td><td>{“name”:“JSON”, “good”:true}</td><td>返回1下标元素</td></tr><tr><td style="text-align:left"></td><td>[1,2,3]</td><td>jq ‘.[-2]’</td><td>2</td><td>返回倒数两个位置元素</td></tr><tr><td style="text-align:left"><strong>.[start:end]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[2:4]’</td><td>[“c”, “d”]</td><td>下标开始到下标结束的元素</td></tr><tr><td style="text-align:left"></td><td>“abcdefghi”</td><td>jq ‘.[2:4]’</td><td>“cd”</td><td>下标开始到下标结束的字符</td></tr><tr><td style="text-align:left"><strong>.[:end]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[:3]’</td><td>[“a”, “b”, “c”]</td><td>首个元素到指定下标元素之间的元素</td></tr><tr><td style="text-align:left"><strong>.[start:]</strong></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[-2:]’</td><td>[“d”, “e”]</td><td>指定下标开始到未元素之间的元素</td></tr><tr><td style="text-align:left"><strong>,</strong></td><td>{“foo”: 42, “bar”: “something else”, “baz”: true}</td><td>jq ‘.foo, .bar’</td><td>42, “something else”</td><td>获取多个key值</td></tr><tr><td style="text-align:left"></td><td>{“user”:“stedolan”, “projects”: [“jq”, “wikiflow”]}</td><td>jq ‘.user, .projects[]’</td><td>“stedolan”, “jq”, “wikiflow”</td><td>b取多个元素的值</td></tr><tr><td style="text-align:left"></td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>jq ‘.[4,2]’</td><td>“e”, “c”</td><td>取4 和 2 下标元素</td></tr><tr><td style="text-align:left"><strong>|</strong></td><td>[{“name”:“JSON”, “good”:true}, {“name”:“XML”, “good”:false}]</td><td>jq ‘.[] | .name’</td><td>“JSON”, “XML”</td><td>管道</td></tr><tr><td style="text-align:left"><strong>[]</strong></td><td>{“user”:“stedolan”, “projects”: [“jq”, “wikiflow”]}</td><td>jq ‘[.user, .projects[]]’</td><td>[“stedolan”, “jq”, “wikiflow”]</td><td>元素值组成新数组</td></tr><tr><td style="text-align:left"></td><td>[1, 2, 3]</td><td>jq ‘[ .[] | . * 2]’</td><td>[2, 4, 6]</td><td>元素值组成新数组</td></tr><tr><td style="text-align:left"><strong>{}</strong></td><td>[{“user”:“stedolan”, “title”: “JQ Primer”}]</td><td>jq ‘.[] | <strong>{user,</strong> <strong>title}</strong>’</td><td>{“user”:“stedolan”, “title”: “JQ Primer”}</td><td>组成对象(使用原key名)</td></tr><tr><td style="text-align:left"></td><td>[{“user”:“stedolan”, “title”: “JQ Primer”}]</td><td>jq ‘.[] | {user1: .user, title: .title}’</td><td>{“user1”:“stedolan”, “title”: “JQ Primer”}</td><td>组成对象(改变key名)</td></tr><tr><td style="text-align:left"><strong>+</strong></td><td>{“a”: 7}</td><td>jq ‘.a + 1’</td><td>8</td><td>算术运算符</td></tr><tr><td style="text-align:left"></td><td>{“a”: [1,2], “b”: [3,4]}</td><td>jq ‘.a + .b’</td><td>[1,2,3,4]</td><td>数组元素合并</td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘{a: 1} + {b: 2} + {c: 3} + {a: 42}’</td><td>{“a”: 42, “b”: 2, “c”: 3}</td><td>合并属性</td></tr><tr><td style="text-align:left"><strong>-</strong></td><td>{“a”:3}</td><td>jq ‘4 - .a’</td><td>1</td><td>算术运算符</td></tr><tr><td style="text-align:left"></td><td>[“xml”, “yaml”, “json”]</td><td>jq ‘. - [“xml”, “yaml”]’</td><td>[“json”]</td><td>删除指定数组内元素</td></tr><tr><td style="text-align:left"><strong>/</strong></td><td>5</td><td>jq '10 / . ’</td><td>2</td><td>算术运算符</td></tr><tr><td style="text-align:left"></td><td>“a,b,c,d,e”</td><td>jq ‘. / “,”’</td><td>[“a”,“b”,“c”,“d”,“e”]</td><td>字符串分隔成数组</td></tr><tr><td style="text-align:left"><strong>length</strong></td><td>[1,2]</td><td>jq ‘. | length’</td><td>2</td><td>数组元素个数</td></tr><tr><td style="text-align:left"></td><td>“string”</td><td>jq ‘. | length’</td><td>6</td><td>string 的长度</td></tr><tr><td style="text-align:left"></td><td>{“a”:2}</td><td>jq ‘. | length’</td><td>1</td><td>对象key个数</td></tr><tr><td style="text-align:left"><strong>keys</strong></td><td>[“a”,“b”,“c”]</td><td>jq ’ . | keys’</td><td>[0,1,2]</td><td>数组下标数组</td></tr><tr><td style="text-align:left"></td><td>{“abc”: 1, “abcd”: 2, “Foo”: 3}</td><td>jq ’ . | keys’</td><td>[“Foo”, “abc”, “abcd”]</td><td>kye数组</td></tr><tr><td style="text-align:left"><strong>has(key)</strong></td><td>{“abc”: 1, “abcd”: 2, “Foo”: 3}</td><td>jq ‘. | has(“abc”)’</td><td>true</td><td>是否包含key</td></tr><tr><td style="text-align:left"><strong>map(x)</strong></td><td>[1,2,3]</td><td>jq ‘map(.+1)’</td><td>[2,3,4]</td><td>元素遍历</td></tr><tr><td style="text-align:left"><strong>map_values(x)</strong></td><td>{“a”: 1, “b”: 2, “c”: 3}</td><td>jq ‘map_values(.+1)’</td><td>{“a”: 2, “b”: 3, “c”: 4}</td><td>对象值遍历</td></tr><tr><td style="text-align:left"><strong>del(path_expression)</strong></td><td>{“foo”: 42, “bar”: 9001, “baz”: 42}</td><td>jq ‘del(.foo)’</td><td>{“bar”: 9001, “baz”: 42}</td><td>删除key</td></tr><tr><td style="text-align:left"></td><td>[“foo”, “bar”, “baz”]</td><td>jq ‘del(.[1, 2])’</td><td>[“foo”]</td><td>删除元素</td></tr><tr><td style="text-align:left"><strong>getpath(PATHS)</strong></td><td>{“a”:{“b”:0, “c”:1}}</td><td>jq ‘[getpath([“a”,“b”], [“a”,“c”])]’</td><td>[0, 1]</td><td>获取指定值</td></tr><tr><td style="text-align:left"><strong>setpath(PATHS;</strong> <strong>VALUE)</strong></td><td>{“a”:{“b”:0}}</td><td>jq ‘setpath([“a”,“b”]; 1)’</td><td>{“a”: {“b”: 1}}</td><td>设置指定值</td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘setpath([0,“a”]; 1)’</td><td>[{“a”:1}]</td><td>设置指定值</td></tr><tr><td style="text-align:left"><strong>select(boolean_expression)</strong></td><td>[1,5,3,0,7]</td><td>jq ‘map(select(. &gt;= 2))’</td><td>[5,3,7]</td><td>select</td></tr><tr><td style="text-align:left"></td><td>[{“id”: “first”, “val”: 1}, {“id”: “second”, “val”: 2}]</td><td>jq ‘.[] | select(.id == “second”)’</td><td>{“id”: “second”, “val”: 2}</td><td>select</td></tr><tr><td style="text-align:left"><strong>arrays,</strong> <strong>objects,</strong> <strong>iterables,</strong> <strong>booleans,</strong> <strong>numbers,</strong> <strong>normals,</strong> <strong>finites,</strong> <strong>strings,</strong> <strong>nulls,</strong> <strong>values,</strong> <strong>scalars</strong></td><td>[[],{},1,“foo”,null,true,false]</td><td>jq ‘.[] | numbers’</td><td>1</td><td>从数组中取指定类型值</td></tr><tr><td style="text-align:left"><strong>add</strong></td><td>[“a”,“b”,“c”]</td><td>jq ‘add’</td><td>“abc”</td><td>字符串元素拼接</td></tr><tr><td style="text-align:left"></td><td>[1, 2, 3]</td><td>jq ‘add’</td><td>6</td><td>sum</td></tr><tr><td style="text-align:left"><strong>any,</strong> <strong>any(condition),</strong> <strong>any(generator;</strong> <strong>condition)</strong></td><td>[true, false]</td><td>jq ‘any’</td><td>true</td><td>有一个元素是true返回true</td></tr><tr><td style="text-align:left"></td><td>[false, false]</td><td>jq ‘any’</td><td>false</td><td></td></tr><tr><td style="text-align:left"></td><td>[]</td><td>jq ‘any’</td><td>false</td><td></td></tr><tr><td style="text-align:left"></td><td>[1,2,3]</td><td>jq ‘any(. &gt; 1)’</td><td>true</td><td></td></tr><tr><td style="text-align:left"><strong>all,</strong> <strong>all(condition),</strong> <strong>all(generator;</strong> <strong>condition)</strong></td><td>[true, false]</td><td>jq ‘all’</td><td>false</td><td>所有元素是true返回true</td></tr><tr><td style="text-align:left"><strong>range(upto),</strong> <strong>range(from;upto)</strong> <strong>range(from;upto;by)</strong></td><td></td><td>jq ‘[range(4)]’</td><td>[0,1,2,3]</td><td>步进</td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘range(2;4)’</td><td>2, 3</td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘[range(2;4)]’</td><td>[2,3]</td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘[range(0;10;3)]’</td><td>[0,3,6,9]</td><td></td></tr><tr><td style="text-align:left"></td><td></td><td>jq ‘[range(0;-5;-1)]’</td><td>[0,-1,-2,-3,-4]</td><td></td></tr><tr><td style="text-align:left"><strong>floor</strong></td><td>3.14159</td><td>jq ‘floor’</td><td>3</td><td>取整</td></tr><tr><td style="text-align:left"><strong>sqrt</strong></td><td>9</td><td>jq ‘sqrt’</td><td>3</td><td>开根</td></tr><tr><td style="text-align:left"><strong>tonumber</strong></td><td>[1, “1”]</td><td>jq ‘.[] | tonumber’</td><td>1, 1</td><td>转数字</td></tr><tr><td style="text-align:left"><strong>tostring</strong></td><td>[1, “1”, [1]]</td><td>jq ‘.[] | tostring’</td><td>[“1”, “1”, “[1]”]</td><td>转json 字符串</td></tr><tr><td style="text-align:left"><strong>type</strong></td><td>[0, false, [], {}, null, “hello”]</td><td>jq ‘map(type)’</td><td>[“number”, “boolean”, “array”, “object”, “null”, “string”]</td><td>查看类型</td></tr><tr><td style="text-align:left"><strong>sort,</strong> <strong>sort_by(path_expression)</strong></td><td>[8,3,null,6]</td><td>jq ‘sort’</td><td>[null,3,6,8]</td><td>order by</td></tr><tr><td style="text-align:left"></td><td>[{“foo”:4, “bar”:10}, {“foo”:3, “bar”:100}, {“foo”:2, “bar”:1}]</td><td>jq ‘sort_by(.foo)’</td><td>[{“foo”:2, “bar”:1}, {“foo”:3, “bar”:100}, {“foo”:4, “bar”:10}]</td><td></td></tr><tr><td style="text-align:left"><strong>group_by(path_expression)</strong></td><td>[{“foo”:1, “bar”:10}, {“foo”:3, “bar”:100}, {“foo”:1, “bar”:1}]</td><td>jq ‘group_by(.foo)’</td><td>[[{“foo”:1, “bar”:10}, {“foo”:1, “bar”:1}], [{“foo”:3, “bar”:100}]]</td><td>聚合函数group by</td></tr><tr><td style="text-align:left"><strong>min,</strong> <strong>max,</strong> <strong>min_by(path_exp),</strong> <strong>max_by(path_exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>unique,</strong> <strong>unique_by(path_exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>reverse</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>contains(element)</strong></td><td>“foobar”</td><td>jq ‘contains(“bar”)’</td><td>true</td><td></td></tr><tr><td style="text-align:left"></td><td>[“foobar”, “foobaz”, “blarp”]</td><td>jq ‘contains([“baz”, “bar”])’</td><td>true</td><td></td></tr><tr><td style="text-align:left"></td><td>[“foobar”, “foobaz”, “blarp”]</td><td>jq ‘contains([“bazzzzz”, “bar”])’</td><td>false</td><td></td></tr><tr><td style="text-align:left"></td><td>{“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]}</td><td>jq ‘contains({foo: 12, bar: [{barp: 12}]})’</td><td>true</td><td></td></tr><tr><td style="text-align:left"></td><td>{“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]}</td><td>jq ‘contains({foo: 12, bar: [{barp: 15}]})’</td><td>false</td><td></td></tr><tr><td style="text-align:left"><strong>indices(s)</strong></td><td>“a,b, cd, efg, hijk”</td><td>jq ‘indices(&quot;, &quot;)’</td><td>[3,7,12]</td><td>返回出现元素下标位置集合</td></tr><tr><td style="text-align:left"></td><td>[0,1,2,1,3,1,4]</td><td>jq ‘indices(1)’</td><td>[1,3,5]</td><td></td></tr><tr><td style="text-align:left"></td><td>[0,1,2,3,1,4,2,5,1,2,6,7]</td><td>jq ‘indices([1,2])’</td><td>[1,8]</td><td>参数s可以输入为数组</td></tr><tr><td style="text-align:left"><strong>index(s),</strong> <strong>rindex(s)</strong></td><td>“a,b, cd, efg, hijk”</td><td>jq ‘index(&quot;, &quot;)’</td><td>3</td><td>indexof</td></tr><tr><td style="text-align:left"></td><td>“a,b, cd, efg, hijk”</td><td>jq 'rindex(&quot;, &quot;)</td><td>12</td><td>lastIndexOf</td></tr><tr><td style="text-align:left"><strong>inside</strong></td><td>“bar”</td><td>jq ‘inside(“foobar”)’</td><td>true</td><td>包含元素</td></tr><tr><td style="text-align:left"></td><td>{“foo”: 12, “bar”: [{“barp”: 15}]}</td><td>jq ‘inside({“foo”: 12, “bar”:[1,2,{“barp”:12, “blip”:13}]})’</td><td>false</td><td></td></tr><tr><td style="text-align:left"><strong>startswith(str)</strong></td><td>[“fo”, “foo”, “barfoo”, “foobar”, “barfoob”]</td><td>jq ‘[.[] | startswith(“foo”)]’</td><td>[false, true, false, true, false]</td><td>开始于</td></tr><tr><td style="text-align:left"><strong>endswith(str)</strong></td><td></td><td></td><td></td><td>结束于</td></tr><tr><td style="text-align:left"><strong>combinations,</strong> <strong>combinations(n)</strong></td><td>[[1,2], [3, 4]]</td><td>jq ‘combinations’</td><td>[1, 3], [1, 4], [2, 3], [2, 4]</td><td>组合_笛卡尔积_</td></tr><tr><td style="text-align:left"></td><td>[0, 1]</td><td>jq ‘combinations(2)’</td><td>[0, 0], [0, 1], [1, 0], [1, 1]</td><td></td></tr><tr><td style="text-align:left"><strong>ltrimstr(str)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>rtrimstr(str)</strong></td><td>[“fo”, “foo”, “barfoo”, “foobar”, “afoo”]</td><td>jq ‘[.[] | ltrimstr(“foo”)]’</td><td>[“fo”,“”,“barfoo”,“bar”,“afoo”]</td><td></td></tr><tr><td style="text-align:left"><strong>split(str)</strong></td><td></td><td></td><td></td><td>split</td></tr><tr><td style="text-align:left"><strong>join(str)</strong></td><td>[“a”,1,2.3,true,null,false]</td><td>jq ‘join(&quot; &quot;)’</td><td>“a 1 2.3 true false”</td><td>转string指定分隔符</td></tr><tr><td style="text-align:left"><strong>while(cond;</strong> <strong>update)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>until(cond;</strong> <strong>next)</strong></td><td>4</td><td>jq ‘[.,1]</td><td>until(.[0] &lt; 1; [.[0] - 1, .[1] * .[0]]) | .[1]’</td><td>24 (4*3*2*1)</td></tr><tr><td style="text-align:left"><strong>foreach</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left">tojson</td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>Format</strong> <strong>strings</strong> <strong>and</strong> <strong>escaping</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@text</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@json</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@html</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@uri</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@csv</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@tsv</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@sh</strong></td><td>###</td><td>###</td><td></td><td></td></tr><tr><td style="text-align:left"><strong>@base64</strong></td><td>“This is a message”</td><td>jq '@base64</td><td>“VGhpcyBpcyBhIG1lc3NhZ2U=”</td><td>加密</td></tr><tr><td style="text-align:left"><strong>@base64d</strong></td><td>###</td><td>###</td><td></td><td>解密</td></tr><tr><td style="text-align:left"><strong>==,</strong> <strong>!=</strong> <strong>&gt;,</strong> <strong>&gt;=,</strong> <strong>&lt;=,</strong> <strong>&lt;</strong> <strong>and/or/not</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>+=,</strong> <strong>-=,</strong> *<strong>=,</strong> <strong>/=,</strong> <strong>%=,</strong> <strong>//=</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>if</strong> <strong>A</strong> <strong>then</strong> <strong>elif</strong> <strong>B</strong> <strong>else</strong> <strong>C</strong> <strong>end</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>//</strong></td><td>{}</td><td>jq ‘.foo // 42’</td><td>42</td><td>提供默认值</td></tr><tr><td style="text-align:left"><strong>isempty(exp)</strong></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"><strong>limit(n;</strong> <strong>exp)</strong></td><td>[0,1,2,3,4,5,6,7,8,9]</td><td>jq ‘[limit(3;.[])]’</td><td>[0,1,2]</td><td></td></tr><tr><td style="text-align:left"><strong>first(expr),</strong> <strong>last(expr),</strong> <strong>nth(n;</strong> <strong>expr)</strong></td><td>10</td><td>jq ‘[first(range(.)), last(range(.)), nth(./2; range(.))]’</td><td>[0,9,5]</td><td></td></tr><tr><td style="text-align:left"><strong>first,</strong> <strong>last,</strong> <strong>nth(n)</strong></td><td>10</td><td>jq ‘[range(.)] | [first, last, nth(5)]’</td><td>[0,9,5]</td><td></td></tr><tr><td style="text-align:left"><strong>?</strong></td><td></td><td></td><td></td><td>忽略异常</td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://blog.csdn.net/Cheat1173010256/article/details/118230562">常用 linux jq 命令语法整理</a></li><li><a href="https://blog.csdn.net/whatday/article/details/125859796">linux shell jq命令 合并json文件</a></li><li><a href="https://juejin.cn/s/jq%20append%20json%20array">jq append json array</a></li><li><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html">jq 常用操作</a></li><li><a href="https://www.tomczhen.com/2017/10/15/parsing-json-with-shell-script/">使用 Shell 脚本来处理 JSON</a></li><li><a href="https://www.jianshu.com/p/6de3cfdbdb0e">jq简易教程</a></li><li><a href="https://www.jianshu.com/p/00ce505c5e53">jq基本用法：读取访问</a></li><li><a href="https://alingse.github.io/jq-manual-cn">jq中文手册</a></li><li><a href="https://jqplay.org/#">A playground for jq</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;近期准备对 &lt;a href=&quot;/xrayr-auto-shell-for-v2board.html&quot;&gt;自用的一个 shell&lt;/a&gt; 进行完善，有些增删改应该用 &lt;code&gt;jq&lt;/code&gt; 来做应该事半功倍一点，将之前整理的一些资料一并做整理做个记录，方便后续查找学习。&lt;/p&gt;</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>宝塔邮局优化解决 `hostname` 信息得分大幅提升</title>
    <link href="https://sobaigu.com/software-postfix-mailinfo-hostname.html"/>
    <id>https://sobaigu.com/software-postfix-mailinfo-hostname.html</id>
    <published>2024-01-23T06:20:29.000Z</published>
    <updated>2024-01-23T06:20:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>之前怀疑宝塔邮局到达率，实际上邮件测试也只有3.5分，所以最近一直在折腾邮件系统。iRedMail 折腾了好几遍，可最终还留下个暂时解决不了的问题：客户端SMTP发信时提示连接服务器失败。</p><p>客户端可以收信，系统各端口访问正常，网页版收发信件也没问题，发出的信件经 <code>mail-tester.com</code> 测试分值几乎满分。可惜，就是解决不了不能外部发信的问题。</p><p>有了折腾 iRedMail 的经验，回过头再来优化下宝塔邮局。</p><h1>优化项目</h1><p>邮件测试显示存在的问题主要有：</p><ol><li>PTR 记录不过关</li><li>主机xxx与xx不匹配，具体忘记截图了</li></ol><p>既然知道问题了，那就朝提示的信息请优化。</p><h2 id="各种DNS解析"><a class="headerlink" href="#各种DNS解析"></a>各种DNS解析</h2><p>以下各种记录，请根据自己服务器实际情况设置，一般邮件系统会提示。设置完可以通过以下命令验证，也可以通过网站查询：<a href="https://www.whatsmydns.net/">https://www.whatsmydns.net/</a></p><h2 id="PTR（rDNS）"><a class="headerlink" href="#PTR（rDNS）"></a>PTR（rDNS）</h2><p>就是通过IP反查主机名，一般VPS后台能自己绑定，不能绑定的给服务商发工单处理。<br>设置好后，可以用此命令测试结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 8.8.8.8 服务器IP</span><br></pre></td></tr></table></figure><h2 id="A记录"><a class="headerlink" href="#A记录"></a>A记录</h2><p>就是把域名解析到你邮件服务器：</p><ul><li>类型：<code>A</code></li><li>名称：如 <code>mail</code></li><li>记录值： 如 <code>10x.16x.19x.11x</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup mail.xxxx.win</span><br></pre></td></tr></table></figure><h2 id="MX记录"><a class="headerlink" href="#MX记录"></a>MX记录</h2><p>配置内容：</p><ul><li>类型：<code>MX</code></li><li>名称：<code>@</code> 或一级域名如 <code>xxxx.win</code></li><li>邮件服务器：就是前一步做A记录的那个，如 <code>mail.xxxx.win</code></li></ul><p>查询验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=mx xxxx.win</span><br></pre></td></tr></table></figure><h2 id="SPF记录"><a class="headerlink" href="#SPF记录"></a>SPF记录</h2><ul><li>类型：TXT</li><li>名称：<code>@</code> 或一级域名如 <code>xxxx.win</code></li><li>内容：<code>v=spf1 mx ~all</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt xxxx.win</span><br></pre></td></tr></table></figure><h2 id="DMARC记录"><a class="headerlink" href="#DMARC记录"></a>DMARC记录</h2><ul><li>类型：TXT</li><li>名称：<code>_dmarc</code></li><li>内容：<code>v=DMARC1; p=none; pct=100; rua=mailto:admin@xxxx.win</code></li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt _dmarc.xxxx.win</span><br></pre></td></tr></table></figure><h2 id="DKIM记录"><a class="headerlink" href="#DKIM记录"></a>DKIM记录</h2><ul><li>类型：TXT</li><li>名称：<code>default._domainkey</code> 或者 <code>dkim._domainkey</code> ，根据邮件系统提示来，宝塔邮局是 <code>default._domainkey</code></li><li>内容：<code>v=DKIM1;k=rsa;p=MIG……</code> ，这是一串很长的字符串，iRedMail 需要去除双引号和换行拼接，宝塔邮局提供直接复制。</li></ul><p>验证命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup -<span class="built_in">type</span>=txt default._domainkey.xxxx.win</span><br><span class="line">nslookup -<span class="built_in">type</span>=txt dkim._domainkey.xxxx.win</span><br></pre></td></tr></table></figure><p>如果记录验证不通过，收件方将提示邮件发送者不可信，查看看到如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dkim=fail(Bad signature)</span><br></pre></td></tr></table></figure><h2 id="hostname"><a class="headerlink" href="#hostname"></a>hostname</h2><p>这个主机名比较坑，可以用 <code>hostname -f</code> 查询，见<a href="/software-iRedMail-hosts.html">本站之前的记录文章</a>。</p><p>在设置完这些后，<code>postfix</code> 给留了个坑，查看邮件原文可见老的 <code>hostname</code> 信息，这个信息是很早之前的 <code>hostname</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Received: from xxx-4aebdd ([2607:f130:0:f3::aaaa:aaaa])</span><br><span class="line">by newxmmxszc96.qq.com (NewMX) with SMTP <span class="built_in">id</span> E1720475</span><br><span class="line"><span class="keyword">for</span> &lt;admin@qq.com&gt;; Mon, 29 Nov 2021 08:56:23 +0800</span><br><span class="line">X-QQ-mid: xmmxszc96t163814xxxxtebzr1d2z</span><br><span class="line">X-QQ-XMAILINFO: MOGuJKokHloM75uz8dxxxrH+vnbIE9n1iuJzmAhtVuxVfxxxx6/hFesAIIJaU9</span><br><span class="line"> ttUm/awDNtZJ+IxEnNjlQ03GOcxgTNOmjGMSxxxxW7</span><br><span class="line">   ...</span><br><span class="line">Received: from [127.0.0.1] (localhost [127.0.0.1])</span><br><span class="line">by xxx-4aebdd (Postfix) with ESMTPA <span class="built_in">id</span> 3473260EDB</span><br></pre></td></tr></table></figure><p>本来第一怀疑就是 <code>postfix</code> 配置文件 <code>/etc/postfix/main.cf</code>，可宝塔邮局界面上打开此配置文件按主机名关键词搜索却无任何匹配，一直信了宝塔的搜索结果。最后通过 vi 打开搜索才发现是宝塔的坑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myhostname = mail.xxxx.win  //将此行设置为你想展示的主机信息</span><br></pre></td></tr></table></figure><p>这个应该是 <code>postfix</code> 在安装的时候自动取的 <code>hostname</code> 值，网上有些说法是为了安全，还需要加其他的过滤规则插件将主机信息隐藏，不知道是否会影响反垃圾邮件，暂且不管。</p><h1>结果验证</h1><p>经以上优化设置后，垃圾邮件测试一番，效果满意，宝塔邮局也可以战！</p><blockquote><p>WOW! 完美，你现在可以开始发送了。<br>得分 ： 9.5/10</p></blockquote><blockquote><p>SpamAssassin喜欢你</p><p>你的发件人身份已验证。</p><ul><li>[SPF] 你的发件服务器 10x.16x.19x.11x 授权使用该发件地址 noreply@xxxx.win</li><li>你的 DKIM 签名有效。</li><li>您的邮件通过了 DMARC 测试</li><li>你的发件服务器 10x.16x.19x.11x 与 mail.xxxx.win 成功关联。</li><li>Your domain name xxxx.win is assigned to a mail server.</li><li>你的主机名mail.xxxx.win已分配了一台邮件服务器。</li></ul><p>Your message could be improved</p><p>你的发件IP在1个黑名单中。</p><ul><li>将你的服务器IP地址 (10x.16x.19x.11x) 与 24 个最常见的 IPv4 黑名单进行匹配。被列入 Barracuda ( -0.5 )</li></ul></blockquote>]]></content>
    
    
    <summary type="html">之前怀疑宝塔邮局到达率，实际上邮件测试也只有3.5分，所以最近一直在折腾邮件系统。iRedMail 折腾了好几遍，可最终还留下个暂时解决不了的问题：客户端SMTP发信时提示连接服务器失败。
客户端可以收信，系统各端口访问正常，网页版收发信件也没问题，发出的信件经 `mail-tester.com` 测试分值几乎满分。可惜，就是解决不了不能外部发信的问题。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>设置Git通过代理连接，解决GitHub仓库无法更新等</title>
    <link href="https://sobaigu.com/git-set-proxy-for-github.html"/>
    <id>https://sobaigu.com/git-set-proxy-for-github.html</id>
    <published>2024-01-22T04:39:47.000Z</published>
    <updated>2024-01-22T04:39:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 GitHub 各种问题，把4年前攒的知识重新翻出来，陈年知识又重见天日了。</p><h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>由于某种原因，某些地区无法正常访问GitHub这个全球最大同性交友社区，造成一批死肥宅无法愉快搞基。<br>虽然挂代理后网页能开了，但在使用Git工具拉取和推送仓库这种体力活仍然不得行，哪怕是已经在代理客户端上设置了使用全局代理，尤其是使用vmess代理的时候，此时我们可以尝试对Git进行额外代理设置。</p><h2 id="设置命令"><a class="headerlink" href="#设置命令"></a>设置命令</h2><p>Git设置或取消代理方式连接网络，只需要执行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#设置使用http/https本地代理</span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> http:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> https:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">#取消http/https本地代理</span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> https.proxy</span><br></pre></td></tr></table></figure><p>以上方式如果还不能解决，可以再次尝试设置sock5代理：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.proxy</span> <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">git config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br></pre></td></tr></table></figure><p>如果只针对GitHub设置代理，则用如下命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只对github.com</span></span><br><span class="line">git config <span class="params">--global</span> http.https:<span class="string">//github.com.proxy</span> socks5:<span class="string">//127.0.0.1</span><span class="function">:1080</span></span><br></pre></td></tr></table></figure><p>对于使用 <code>ssh://</code> 协议的，可以配置socks5代理，在 <code>~/.ssh/config</code> 文件内容后面添加几行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">ProxyCommand connect -S <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span> %h %p</span><br></pre></td></tr></table></figure><h2 id="适用场景"><a class="headerlink" href="#适用场景"></a>适用场景</h2><ol><li>hexo等发布到GitHub时失败，错误提示：“xx time out”</li><li>更新GitHub仓库无响应<blockquote><p>$ git push<br>ssh: connect to host <a href="http://github.com">github.com</a> port 22: Network is unreachable<br>fatal: The remote end hung up unexpectedly</p></blockquote></li><li>拉取或者提交代码时超时报错<blockquote><p>[info] ssh: connect to host <a href="http://github.com">github.com</a> port 22: Connection timed out<br>fatal: Could not read from remote repository.</p><pre><code>   Please make sure you have the correct access rights   and the repository exists.</code></pre></blockquote></li></ol><h2 id="参考文档"><a class="headerlink" href="#参考文档"></a>参考文档</h2><ol><li><a href="https://gist.github.com/laispace/666dd7b27e9116faece6">git 设置和取消代理</a></li></ol>]]></content>
    
    
    <summary type="html">由于某种原因，某些地区无法正常访问GitHub这个全球最大同性交友社区，造成一批死肥宅无法愉快搞基。 虽然挂代理后网页能开了，但在使用Git工具拉取和推送仓库这种体力活仍然不得行，哪怕是已经在代理客户端上设置了使用全局代理，尤其是使用vmess代理的时候，此时我们可以尝试对Git进行额外代理设置。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="混技能" scheme="https://sobaigu.com/tags/%E6%B7%B7%E6%8A%80%E8%83%BD/"/>
    
    <category term="Hexo" scheme="https://sobaigu.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>php composer.phar update：A facade root has not been set</title>
    <link href="https://sobaigu.com/composer-upgrade-error-A-facade-root-has-not-been-set.html"/>
    <id>https://sobaigu.com/composer-upgrade-error-A-facade-root-has-not-been-set.html</id>
    <published>2024-01-18T08:04:55.000Z</published>
    <updated>2024-01-18T08:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近缅A丢失一辆车，2024年才开始几个工作日，打工人根本无心上班……</p><p>有个很多年的关系户跑来说订阅不到节点了，问我这个搞技术的还能不能干？虽然缅A丢了车钱，但咱不能丢技术，虽然关系户并没有赞助半毛钱一直蹭着俺的小鸡鸡！</p><span id="more"></span><h2 id="然后手贱开始了"><a class="headerlink" href="#然后手贱开始了"></a>然后手贱开始了</h2><p>虽然自己用着没什么问题，但有人提意见就干脆升级把程序，以转移部分缅A赔钱之苦，结果 <code>php composer.phar update -vvv</code> 时报错，后台也登录不进去了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught <span class="built_in">RuntimeException</span>: A facade root has not been set. </span><br><span class="line">in /www/wwwroot/v2board/vendor/laravel/framework/src/Illuminate/Support/Facades/Facade.php:<span class="number">258</span></span><br></pre></td></tr></table></figure><p>翻出第258行的代码，也不知道 <code>getFacadeRoot</code> 是个啥：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$instance</span> = <span class="built_in">static</span>::<span class="title function_ invoke__">getFacadeRoot</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable">$instance</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RuntimeException</span>(<span class="string">&#x27;A facade root has not been set.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$instance</span>-&gt;<span class="variable">$method</span>(...<span class="variable">$args</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="溯源"><a class="headerlink" href="#溯源"></a>溯源</h2><p>查阅了大量资料，258行 <code>Uncaught RuntimeException</code> 的问题都不少，其中 <a href="https://copyprogramming.com/howto/uncaught-runtimeexception-a-facade-root-has-not-been-set-in-facade-php-258-when-upgrading-to-laravel-7">这个记录</a> 最贴切：</p><blockquote><p>Runtime Exception Not Caught: Facade Root Not Set in Facade.php:258 During Laravel 7 Upgrade</p></blockquote><p>但翻来翻去都是教怎么改代码，怎么用正确的函数，很明显这不适合本次问题，因为半吊子工程师这些次提交改的代码并没有触及那一块。</p><p>然后看到一篇 <a href="https://www.cainiaoxueyuan.com/bc/44168.html">Laravel框架提示 A facade root has not been set</a>：</p><blockquote><p>检查下 config 目录里面的文件，新增或者修改了什么，把语法错误找出来修复</p></blockquote><p>想起最开始那位仁兄说不能订阅，确实改了下订阅地址，于是去翻 <code>v2board.php</code>，看花老眼终于发现在文件的倒数位置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&#x27;subscribe_path&#x27;</span> =&gt; <span class="string">&#x27;/xxxx&#x27;</span>,</span><br><span class="line">  );<span class="string">&#x27;/xxxx&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个配置没动过，但多出来这部分错乱配置可能是 v2board 自动保存机制的问题。将错误修正后升级果然一气呵成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="string">&#x27;subscribe_path&#x27;</span> =&gt; <span class="string">&#x27;/xxxx&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近缅A丢失一辆车，2024年才开始几个工作日，打工人根本无心上班……&lt;/p&gt;
&lt;p&gt;有个很多年的关系户跑来说订阅不到节点了，问我这个搞技术的还能不能干？虽然缅A丢了车钱，但咱不能丢技术，虽然关系户并没有赞助半毛钱一直蹭着俺的小鸡鸡！&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>阿里云新系统一键净化初始化捷径</title>
    <link href="https://sobaigu.com/aliyuncloud-init-new-os-one-key.html"/>
    <id>https://sobaigu.com/aliyuncloud-init-new-os-one-key.html</id>
    <published>2024-01-17T12:08:36.000Z</published>
    <updated>2024-03-03T12:08:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在 <a href="xrayr-auto-shell-for-v2board.html">XrayR 后端一键对接 V2board 脚本</a> 中提过在 Xshell 上添加个命令按钮 完成一些重复不变的工作，居然有人来问怎么添加……</p><p>不会添加就别用了吧，站长从来不教这种！</p><span id="more"></span><h2 id="缘起"><a class="headerlink" href="#缘起"></a>缘起</h2><p>一般在阿里云上买小鸡，阿里云大公司不屑于提供一些方便用户使用的功能，比如：提供个ssh-key存储管理，每次都要在远程连接里现增ssh-key才行。</p><p>而且阿里云的系统镜像里总是会多几个服务，各种助手真干了啥咱也不知道，以前嫌麻烦只是用了 <a href="/vps-purge-aliyun-service.html">净化脚本</a>，现在觉得还是干脆开机之后一键DD以绝后患好些。</p><h2 id="命令助手DD系统"><a class="headerlink" href="#命令助手DD系统"></a>命令助手DD系统</h2><p>在阿里云服务器管理中，新增个一键DD纯净系统脚本命令助手：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">apt install -y curl wget</span><br><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">&#x27;https://www.moeelf.com/attachment/LinuxShell/InstallNET.sh&#x27;</span>) -d 11 -v 64 -a</span><br></pre></td></tr></table></figure><p>上面的示例是用萌咖一键脚本 <code>DD</code> 成 <code>Debian11</code>，系统密码默认为：<code>MoeClub.org</code>，需要其他更多系统可查阅 <a href="https://www.moeelf.com/archives/293.html">萌咖博客</a></p><p>每个区的命令都是相互隔离的，所以费点力气每个区都增加个命令助手吧。</p><p>每次新开机器后，防火墙里添加一条放行所有的规则，然后趁还有阿里云助手可用时执行命令DD新系统，等系统DD完用 <code>xshell</code> 等终端连接使用，就没阿里云控制台什么事了。</p><h2 id="新系统基础设置"><a class="headerlink" href="#新系统基础设置"></a>新系统基础设置</h2><p>DD完系统后，除了改默认密码，还有些基础工作几乎每次都会做，刚好自己有这么个命令按钮，做个记录防换了管理机要重新弄：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有些系统没有sudo</span></span><br><span class="line"><span class="built_in">which</span> sudo || apt install -y sudo</span><br><span class="line"><span class="comment"># 添加个ssh-key，平常用这个认证多</span></span><br><span class="line">[[ -d ~/.ssh ]] || <span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;YOUR-PUBLIC-KEY&quot;</span> &gt;~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改称心如意的root密码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:YOUR-PASSWORD&quot;</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统设置</span></span><br><span class="line">apt install -y wget curl</span><br><span class="line"><span class="comment">## 设置时区为东八区</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment">## 开启cron日志输出</span></span><br><span class="line">sed -i <span class="string">&quot;/cron/s/^#//&quot;</span> /etc/rsyslog.conf</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"><span class="comment">## 启用 ll 命令方便后续使用</span></span><br><span class="line">sed -i <span class="string">&quot;s|^# export LS_OPTIONS|export LS_OPTIONS|&quot;</span> ~/.bashrc</span><br><span class="line">sed -i <span class="string">&quot;s|^# eval |eval |&quot;</span> ~/.bashrc</span><br><span class="line">sed -i <span class="string">&quot;s|^# alias l|alias l|g&quot;</span> ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用BBR，原作者的脚本太庞杂了，自己存一份有空做些精简</span></span><br><span class="line">bash &lt;(curl -Lso- https://github.com/cdnf/shell/raw/master/tools/bbr_kernel.sh)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/jinwyp/one_click_script">Easy install latest or LTS linux kernel and enable BBR</a></li><li><a href="https://blog.ffing.cn/linux/linux-%E9%9D%9E%E4%BA%A4%E4%BA%92%E5%BC%8F%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">linux 非交互式修改密码</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在 &lt;a href=&quot;xrayr-auto-shell-for-v2board.html&quot;&gt;XrayR 后端一键对接 V2board 脚本&lt;/a&gt; 中提过在 Xshell 上添加个命令按钮 完成一些重复不变的工作，居然有人来问怎么添加……&lt;/p&gt;
&lt;p&gt;不会添加就别用了吧，站长从来不教这种！&lt;/p&gt;</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://sobaigu.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>利用 Cloudflare worker 或 pages 免费服务反代 GitHub</title>
    <link href="https://sobaigu.com/proxy-site-with-cloudflare.html"/>
    <id>https://sobaigu.com/proxy-site-with-cloudflare.html</id>
    <published>2023-12-30T14:03:44.000Z</published>
    <updated>2023-12-30T14:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 站点经常有 <code>Timeout</code> 或 <code>Reset</code> 的情况发生，有时候又懒得开梯子，所以想零成本的做一个 GitHub 的线上代理。</p><p>刚好 CloudFlare 有免费 <code>Worker</code> 功能，同时 Cloudflare 会对静态页面做 CDN 缓存，也会加快我们访问 GitHub 的速度。</p><p>有大神写好了代码，实现对 GitHub 做全球代理，将大神们的成果抄录，以备不时之需。</p><span id="more"></span><h2 id="实施步骤"><a class="headerlink" href="#实施步骤"></a>实施步骤</h2><p>步骤很简单，没必要写教程，大概就是：</p><ol><li>注册 cloudflare 账号</li><li>创建 <code>worker</code> 或 <code>pages</code> 应用</li><li>粘贴代码保存并发布</li><li>绑定自定义域名</li></ol><h2 id="实现代码"><a class="headerlink" href="#实现代码"></a>实现代码</h2><h3 id="worker-代理-GitHub-网站"><a class="headerlink" href="#worker-代理-GitHub-网站"></a><code>worker</code> 代理 GitHub 网站</h3><p>以下代码，能实现用自己的域名打开 GitHub 站使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  async <span class="title function_">fetch</span><span class="params">(request, env)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(request.url);</span><br><span class="line">    <span class="type">const</span> <span class="variable">hostname</span> <span class="operator">=</span> _url.hostname</span><br><span class="line">    _url.hostname = <span class="string">&quot;github.com&quot;</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(_url, request);</span><br><span class="line">    req.headers.set(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;https://github.com&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="variable">res</span> <span class="operator">=</span> await <span class="title function_">fetch</span><span class="params">(req)</span>;</span><br><span class="line">    <span class="type">let</span> <span class="variable">newres</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Response</span>(res.body, res);</span><br><span class="line"></span><br><span class="line">    <span class="type">let</span> <span class="variable">location</span> <span class="operator">=</span> newres.headers.get(<span class="string">&#x27;location&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (location !== <span class="literal">null</span> &amp;&amp; location !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      location = location.replace(<span class="string">&#x27;://github.com&#x27;</span>, <span class="string">&#x27;://&#x27;</span>+hostname);</span><br><span class="line">      newres.headers.set(<span class="string">&#x27;location&#x27;</span>, location);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newres </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中 GitHub 对于 <code>Post</code> 请求，会检查 <code>Origin</code> 头，如果不是 GitHub 自身的域名，会直接返回 <code>422</code> 错误。</p><p>这里使用以下代码，将转发给 GitHub 的 <code>header</code> 覆盖 <code>Origin</code> 头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.headers.set(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;https://github.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当用户没有登录的时候，响应的 <code>Location</code> 字段会被设置为 <code>https://github.com/login</code>，这里为了避免浏览器跳转到 GitHub 官网，修改了 <code>location</code> 字段到请求域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">location</span> <span class="operator">=</span> newres.headers.get(<span class="string">&#x27;location&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (location !== <span class="literal">null</span> &amp;&amp; location !== <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">   location = location.replace(<span class="string">&#x27;://github.com&#x27;</span>, <span class="string">&#x27;://&#x27;</span>+hostname);</span><br><span class="line">   newres.headers.set(<span class="string">&#x27;location&#x27;</span>, location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="worker-反代指定网站"><a class="headerlink" href="#worker-反代指定网站"></a><code>worker</code> 反代指定网站</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">  <span class="string">&quot;fetch&quot;</span>,event =&gt; &#123;</span><br><span class="line">     let url=<span class="keyword">new</span> <span class="title class_">URL</span>(event.request.url);</span><br><span class="line">     url.hostname=<span class="string">&quot;abc.def.xyz&quot;</span>; <span class="comment">// 修改成自己的节点IP/域名</span></span><br><span class="line">     url.protocol=<span class="string">&#x27;https&#x27;</span>; <span class="comment">// 如为http协议请修改为http</span></span><br><span class="line">     let request=<span class="keyword">new</span> <span class="title class_">Request</span>(url,event.request);</span><br><span class="line">     event. respondWith(</span><br><span class="line">       fetch(request)</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="pages-反代指定网站"><a class="headerlink" href="#pages-反代指定网站"></a><code>pages</code> 反代指定网站</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  async <span class="title function_">fetch</span><span class="params">(request, env)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">_url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(request.url);</span><br><span class="line">    _url.hostname = _url.pathname.startsWith(<span class="string">&quot;/gh/&quot;</span>)</span><br><span class="line">      ? <span class="string">&quot;cdn.jsdelivr.net&quot;</span></span><br><span class="line">      : <span class="string">&quot;www.baidu.com&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(_url, request);</span><br><span class="line">    <span class="keyword">return</span> fetch(req);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://cloud.tencent.com/developer/article/2211557">利用CloudFlare的Workers和Pages反代Github并缓存实现Github文件加速访问</a></li><li><a href="https://www.xksec.com/posts/20230317-reverse-proxy-to-github/">利用CloudFlare的Worker反代Github站点</a></li><li><a href="https://blog.misaka.rest/2023/01/22/cf-wkrs-node/">使用 CloudFlare Workers 反代节点</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;GitHub 站点经常有 &lt;code&gt;Timeout&lt;/code&gt; 或 &lt;code&gt;Reset&lt;/code&gt; 的情况发生，有时候又懒得开梯子，所以想零成本的做一个 GitHub 的线上代理。&lt;/p&gt;
&lt;p&gt;刚好 CloudFlare 有免费 &lt;code&gt;Worker&lt;/code&gt; 功能，同时 Cloudflare 会对静态页面做 CDN 缓存，也会加快我们访问 GitHub 的速度。&lt;/p&gt;
&lt;p&gt;有大神写好了代码，实现对 GitHub 做全球代理，将大神们的成果抄录，以备不时之需。&lt;/p&gt;</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Aria2+AriaNg打造24小时下载服务器</title>
    <link href="https://sobaigu.com/aria2-with-ariang-downlowd-server.html"/>
    <id>https://sobaigu.com/aria2-with-ariang-downlowd-server.html</id>
    <published>2023-12-26T02:01:28.000Z</published>
    <updated>2024-05-05T03:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>老司机不知道多久没下过片了，大概有好几年了，有人发了张车牌照，看上去很养眼……</p><p>那咱得去仔细研究下，发现下载速度堪忧，照这速度也不知道猴年马月能下载完。想想自己常年养着几个外网 VPS，也大都处于资源闲置状态，不如就此整个下载服务器。</p><h2 id="系统方案"><a class="headerlink" href="#系统方案"></a>系统方案</h2><p>不知道哪年整过 aria 下载，那自然是按熟悉的套路来：<a href="https://github.com/mayswind/AriaNg">AriaNg</a> 作为前端管理下载任务，aria2 作为后端下载。经过筛选，看到 P3TERX 大神整了个 <a href="https://github.com/P3TERX/Aria2-Pro-Docker">Aria2 Docker</a>，功能够强大，完全能满足需求。</p><pre class="mermaid">graph LR;    AriaNg --> aria2 --files--> download_to_local & remote_player;    Browser --bt/http/ftp...--> AriaNg;</pre><script type="text/javascript" async  src="https://cdn.staticfile.org/mermaid/10.6.1/mermaid.min.js"></script><h2 id="实施"><a class="headerlink" href="#实施"></a>实施</h2><h3 id="安装-Aria2-Pro-Docker"><a class="headerlink" href="#安装-Aria2-Pro-Docker"></a>安装 Aria2-Pro-Docker</h3><p>没必要写重复的教程，直接看 <a href="https://p3terx.com/archives/docker-aria2-pro.html" title="Aria2 Pro - 更好用的 Aria2 Docker 容器镜像">P3TERX 大神的教程</a>，总的来说这个 Docker 使用 Aria2 完美配置方案，功能比较完善，镜像特点：</p><ul><li>BT 下载率高、速度快</li><li>重启后不丢失任务进度、不重复下载</li><li>删除正在下载的任务自动删除未完成的文件</li><li>下载错误自动删除未完成的文件</li><li>下载完成自动删除控制文件(.aria2后缀名文件)</li><li>下载完成自动删除种子文件(.torrent后缀名文件)</li><li>下载完成自动删除空目录</li><li>BT 下载完成自动清除垃圾文件(文件类型过滤功能)</li><li>BT 下载完成自动清除小文件(文件大小过滤功能)</li><li>有一定的防版权投诉、防迅雷吸血效果</li><li>更好的 PT 下载支持</li></ul><h3 id="部署-AriaNg"><a class="headerlink" href="#部署-AriaNg"></a>部署 AriaNg</h3><p>有人把这个也放 Docker 里，但站长觉着完全没必要，Ar­i­aNg就是个前端静态页，如果用宝塔之类的部署个网站就更简单快捷，也不用多一次反代处理，还能让宝塔自动申请证书。</p><p>同样的，不写重复的教程，可参考：<a href="https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html" title="Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程">P3TERX 大神的教程</a></p><blockquote><p><strong>科普</strong>： Ar­i­aNg 只是一个静态网页，只负责发送指令给 Aria2 服务端，所填写的 <code>RPC</code> 地址和 <code>RPC 密钥</code>等设置数据只会储存在本地浏览器中，不管是在本地直接打开使用还是访问在线网页使用都只是本地浏览器到远端 Aria2 服务的 <code>RPC</code> 协议通讯。所以部署到 Web 服务器不是必要操作，对页面设置密码更是徒劳。</p></blockquote><p>以上两个弄完，随便传个种子就可以体验公网 IP 下载速度了，如果不做限速，服务器带宽能跑满，<strong>这个24小时挂机的下载服务器你值得拥有！</strong></p><p><img src="../images/aria2-speed.png" alt="aria2高速下载" loading="lazy"></p><h2 id="常见问题"><a class="headerlink" href="#常见问题"></a>常见问题</h2><p>关于前面的安装部署，网上教程多如牛毛，但往往自己去实施的时候就遇到各种磕磕碰碰，这才是本文章要记录的重点。</p><h3 id="提示错误：认证失败"><a class="headerlink" href="#提示错误：认证失败"></a>提示错误：认证失败</h3><p>这一定是 <code>Aria2 RPC 密钥</code> 错误了，在 AriaNg 页面上打开：<code>AriaNg 设置 --》RPC……</code>，填上正确的认证密钥，就是 <code>Aria2 Docker</code> 启动时 <code>RPC_SECRET=</code> 设置的值，建议不要有空格。</p><h3 id="errorCode-1-Failed-to-bind-a-socket-cause-Name-or-service-not-known"><a class="headerlink" href="#errorCode-1-Failed-to-bind-a-socket-cause-Name-or-service-not-known"></a>errorCode=1 Failed to bind a socket, cause: Name or service not known</h3><p>有以下两种可能会导致：</p><ol><li>Docker 端口未做外部映射：做端口映射，同时防火墙将端口放行</li><li>启用了https，但https不可用状态：配置https证书，见下文配置方法</li></ol><h3 id="https访问时aria2未连接"><a class="headerlink" href="#https访问时aria2未连接"></a>https访问时aria2未连接</h3><p>当使用 <code>https</code> 协议访问前端 AriaNg 时，<code>Aria2 RPC 连接协议</code> 会被强制为 <code>Https</code> 或 <code>WebSocket(安全)</code>，此时我们需要配置 Aria2 启用安全协议及证书，编辑 Aria2 配置文件 <code>aria2.con</code>：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RPC 服务 SSL/TLS 加密, 默认：false</span></span><br><span class="line"><span class="comment"># 启用加密后必须使用 https 或者 wss 协议连接</span></span><br><span class="line"><span class="comment"># 不推荐开启，建议使用 web server 反向代理，比如 Nginx、Caddy ，灵活性更强。</span></span><br><span class="line"><span class="attr">rpc-secure</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书文件复制到映射 `/config/` 路径的地方</span></span><br><span class="line"><span class="comment"># 也可以将宝塔的证书目录做路径映射再直接配置到此处</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span></span><br><span class="line"><span class="attr">rpc-certificate</span>=/config/fullchain.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span></span><br><span class="line"><span class="attr">rpc-private-key</span>=/config/privkey.pem</span><br></pre></td></tr></table></figure><p>保存配置重启 Docker，就能愉快地使用 <code>Https</code> 或 <code>WebSocket(安全)</code> 协议连通 Aria2 了。</p><p>以上涉及的文件路径：</p><ul><li><code>aria2.con</code>：在 Docker 启动时 <code>/config</code> 映射的对应路径里，不知道的话可以用 <code>find / -name aria2.conf</code> 搜索</li><li><code>rpc-certificate</code>：以宝塔自动申请的证书位置为例，在 <code>/www/server/panel/vhost/cert/</code> 下以域名目录存放，默认认证文件为 <code>fullchain.pem</code></li><li><code>rpc-private-key</code>：同上，另一个 <code>privkey.pem</code> 即为私钥文件</li></ul><h3 id="证书配置好了，仍然报错：无法连接到-Aria2"><a class="headerlink" href="#证书配置好了，仍然报错：无法连接到-Aria2"></a>证书配置好了，仍然报错：<code>无法连接到 Aria2</code></h3><p>是不是域名启用了CDN？</p><p>如前文 AriaNg 科普所言：</p><blockquote><p>不管是在本地直接打开使用还是访问在线网页使用都只是本地浏览器到远端 Aria2 服务的 <code>RPC</code> 协议通讯</p></blockquote><p>也就是说是关系到通讯端口的，启用CDN后访问端口 <code>443</code>，默认是不能转发到 AriaNg 需要使用的 <code>https://xxx:6800/jsonrpc</code> 这个端口，所以需要额外做一个反代，如前文配置中的注释提示：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不推荐开启，建议使用 web server 反向代理，比如 Nginx、Caddy ，灵活性更强。</span></span><br></pre></td></tr></table></figure><p>站长一开始就没有接受 Aria2 的建议，把 cloudflare 的云朵代理关了，因为就自己用，想用 CDN 的有两条路径：</p><ol><li>将RPC通讯端口改成 CDN 支持的端口，如 cloudflare 的 <code>8443</code>，具体可以参考：<a href="/network-ports-compatible-with-cloudflare-proxy.html">Network ports compatible with Cloudflares proxy</a></li><li>再搞个单独的域名用于 RPC 通讯地址，然后该域名再反代到 RPC 的 <code>6800</code> 端口</li></ol><h3 id="文件自动归档-分类"><a class="headerlink" href="#文件自动归档-分类"></a>文件自动归档/分类</h3><p>所谓归档，就是将下载完成的任务文件移动到一个单独的文件夹去，默认是在下载文件夹下的 <code>completed</code> 目录，如果需要移动到其他目录，那么需要给 Docker 做相应路径映射：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-v /data/downloads:/downloads \ <span class="comment"># 下载中</span></span><br><span class="line">-v /data/completed:/completed \ <span class="comment"># 下载完</span></span><br></pre></td></tr></table></figure><p>同时，修改 <code>script.conf</code>：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 文件移动设置(move.sh) ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动目标目录</span></span><br><span class="line"><span class="comment"># dest-dir=/downloads/completed # 默认配置</span></span><br><span class="line"><span class="attr">dest-dir</span>=/completed</span><br></pre></td></tr></table></figure><p>以上，每次下载完成的任务就会自动被移动到 <code>/data/completed</code> 这个目录，但由于 Docker 的限制，此移动并不是真正的移动，而是复制后删除，也就意味着磁盘会被重复全量写一遍，虽然死道友不死贫道，但貌似也没必要。</p><h2 id="参考链接"><a class="headerlink" href="#参考链接"></a>参考链接</h2><ol><li><a href="https://p3terx.com/archives/docker-aria2-pro.html" title="Aria2 Pro - 更好用的 Aria2 Docker 容器镜像">Aria2 Pro - 更好用的 Aria2 Docker 容器镜像</a></li><li><a href="https://p3terx.com/archives/aria2-frontend-ariang-tutorial.html" title="Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程">Aria2 前端面板 ( GUI、WebUI ) AriaNg 使用教程</a></li><li><a href="https://tech.he-sb.top/posts/use-https-on-aria2/" title="使用 HTTPS 连接 Aria2">使用 HTTPS 连接 Aria2</a></li></ol>]]></content>
    
    
    <summary type="html">老司机不知道多久没下过片了，大概有好几年了，有人发了张车牌照，看上去很养眼……
那咱得去仔细研究下，发现下载速度堪忧，照这速度也不知道猴年马月能下载完。想想自己常年养着几个外网 VPS，也大都处于资源闲置状态，不如就此整个下载服务器。</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="晒酷软" scheme="https://sobaigu.com/tags/%E6%99%92%E9%85%B7%E8%BD%AF/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt 系统定时任务运行 shell</title>
    <link href="https://sobaigu.com/shell-run-with-cron-in-openwrt.html"/>
    <id>https://sobaigu.com/shell-run-with-cron-in-openwrt.html</id>
    <published>2023-11-08T11:34:27.000Z</published>
    <updated>2023-11-08T11:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>某天在 YouTube 上打开小视频的时候，居然提示有广告屏蔽插件，要么停用屏蔽显示广告，要么买高级会员。</p><p>咱就是纯粹不想等待广告读秒，也不想中途突然跳出广告，根本不舍得买高级会员，所以想到在路由中屏蔽，smartdns 的广告过滤还蛮有效。</p><p>搞技术的都知道，这种东西是按配置不定期更新的，就是个你来我往，为了省事，就建了个 shell 脚本添加定时任务，没想在 OpenWrt 系统里和普通的 Linux 不太一样。</p><h2 id="现象"><a class="headerlink" href="#现象"></a>现象</h2><p>先看 shell 内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line">logfile=<span class="string">&quot;/root/smartdns-update.log&quot;</span></span><br><span class="line">Ts=$(<span class="built_in">date</span> -R)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start work at <span class="variable">$Ts</span>&quot;</span> &gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /etc/smartdns/smartdns-a*.conf &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;befor------after&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line">antiad_src=<span class="string">&quot;https://anti-ad.net/anti-ad-for-smartdns.conf&quot;</span></span><br><span class="line">antiad_dst=<span class="string">&quot;smartdns-antiad.conf&quot;</span></span><br><span class="line">wget  --no-check-certificate <span class="variable">$&#123;antiad_src&#125;</span> -O <span class="variable">$&#123;antiad_dst&#125;</span> &amp;&amp; <span class="built_in">mv</span> -f <span class="variable">$&#123;antiad_dst&#125;</span> /etc/smartdns/<span class="variable">$&#123;antiad_dst&#125;</span></span><br><span class="line"></span><br><span class="line">adrules_src=<span class="string">&quot;https://adrules.top/smart-dns.conf&quot;</span></span><br><span class="line">adrules_dst=<span class="string">&quot;smartdns-adrules.conf&quot;</span></span><br><span class="line">wget  --no-check-certificate <span class="variable">$&#123;adrules_src&#125;</span> -O <span class="variable">$&#123;adrules_dst&#125;</span> &amp;&amp; <span class="built_in">mv</span> -f <span class="variable">$&#123;adrules_dst&#125;</span> /etc/smartdns/<span class="variable">$&#123;adrules_dst&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l /etc/smartdns/smartdns-a*.conf &gt;&gt;<span class="variable">$logfile</span></span><br><span class="line"></span><br><span class="line">smartdns restart</span><br><span class="line">Te=$(<span class="built_in">date</span> -R)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;smartdns has restarted at <span class="variable">$Te</span>&quot;</span> &gt;&gt;<span class="variable">$logfile</span></span><br></pre></td></tr></table></figure><p>脚本功能很纯粹，只是为了下载线上最新的配置并应用，手动执行功能没问题，但添加到路由定时任务后功能却未实现，使用 <code>logread -e cron</code> 可见定时任务执行过了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tue Nov  7 11:13:00 2023 cron.err crond[9487]: USER root pid 17170 cmd /root/smartdns-adblock.sh</span><br><span class="line">Tue Nov  7 11:14:00 2023 cron.err crond[9487]: user root: process already running: /root/smartdns-adblock.sh</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a class="headerlink" href="#解决方法"></a>解决方法</h2><p>一开始以为是路径的问题，但改成了绝对路径也一样的结果。原来 OpenWrt 中定时任务需要指定运行环境，最终添加的定时任务如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 6 * * * . /etc/profile; /root/smartdns-adblock.sh</span><br></pre></td></tr></table></figure><p>添加 <code>. /etc/profile;</code> 这段内容后，定时任务成功触发相应功能。</p>]]></content>
    
    
    <summary type="html">某天在 YouTube 上打开小视频的时候，居然提示有广告屏蔽插件，要么停用屏蔽显示广告，要么买高级会员。
咱就是纯粹不想等待广告读秒，也不想中途突然跳出广告，根本不舍得买高级会员，所以想到在路由中屏蔽，smartdns 的广告过滤还蛮有效。
搞技术的都知道，这种东西是按配置不定期更新的，就是个你来我往，为了省事，就建了个 shell 脚本添加定时任务，没想在 OpenWrt 系统里和普通的 Linux 不太一样。</summary>
    
    
    
    <category term="玩系统" scheme="https://sobaigu.com/categories/%E7%8E%A9%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>git submodule 子模块管理实操</title>
    <link href="https://sobaigu.com/git-submodule-practice.html"/>
    <id>https://sobaigu.com/git-submodule-practice.html</id>
    <published>2023-10-13T12:16:45.000Z</published>
    <updated>2023-10-13T12:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="headerlink" href="#前言"></a>前言</h2><p>项目中经常包含别人维护的模块，在 <code>git</code> 中以子模块的形式引用提交，一些命令总是记不住，往往都是现用现查，干脆整理记录子模块相关的基础命令，懒得反复到处找。</p><h2 id="添加submodule"><a class="headerlink" href="#添加submodule"></a>添加submodule</h2><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;repo_url&gt; &lt;local_path&gt;</span><br></pre></td></tr></table></figure><p>一个实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule add -b master --depth=1 https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</span><br><span class="line">Cloning into <span class="string">&#x27;C:/Users/Administrator/Documents/Git/hexoBlog/themes/fluid&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 214, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (214/214), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (202/202), <span class="keyword">done</span>.</span><br><span class="line">Receiving objects: 100% (214/214), 536.96 KiB | 148.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 214 (delta 5), reused 88 (delta 2), pack-reused 0</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> .gitmodules.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br></pre></td></tr></table></figure><p>添加完成后，可以查看本地子模块状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule status</span><br><span class="line"> 15310a9d87a2300f9292dd66b2c243775d46f9c6 themes/fluid (v1.9.5-4-g15310a9)</span><br></pre></td></tr></table></figure><p>添加 <code>submodule</code> 后，会产生以下变化：</p><ol><li>在仓库根目录下生成一个 <code>.gitmodules</code>，文件，内容：</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">path</span> = themes/fluid</span><br><span class="line"><span class="attr">url</span> = https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></pre></td></tr></table></figure><ol start="2"><li>仓库配置 <code>.git/config</code> 中也会相应添加：</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">url</span> = https://github.com/fluid-dev/hexo-theme-fluid.git</span><br></pre></td></tr></table></figure><ol start="3"><li>生成 <code>.git\modules\themes\fluid</code> 文件夹，存储的是自模块 git 版本管理信息</li></ol><p>最后，将本地变更提交同步到线上仓库就完成了。</p><h2 id="更新submodule"><a class="headerlink" href="#更新submodule"></a>更新submodule</h2><p><img src="../images/vscode-hexo.png" alt="引自网络的图片示例" loading="lazy"></p><p>当上游仓库有新版本时，我们可以在集成Git操作界面上拉取更新，也可以使用以下命令完成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认只会克隆子模块目录，需要在项目根目录执行 init 命令完成子模块内容的同步</span></span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><p>也可以用以下组合命令一次完成子模块更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>当然，我们在克隆主项目时可以同时将子模块一并拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules &lt;repo_url&gt; </span><br></pre></td></tr></table></figure><blockquote><p>当我们决定以 <code>submodule</code> 方式管理某个仓库时，建议相应 <code>submodule</code> 所有的增删改都单向操作，即：</p><ul><li>在主项目中，只单向从 <code>submodule</code> 上游拉取更新，其他所有的变更都该让 <code>submodule</code> 上游去完成</li></ul></blockquote><h2 id="修改submodule"><a class="headerlink" href="#修改submodule"></a>修改submodule</h2><p>有时候想变更 <code>submodule</code> 信息，我们可以删除后重新添加，也可以直接修改。</p><p>同样用上面的实例，找到前文添加子模块时所述的变更 <code>.gitmodules</code>，修改仓库 URL：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[submodule &quot;themes/fluid&quot;]</span></span><br><span class="line"><span class="attr">path</span> = themes/fluid</span><br><span class="line"><span class="attr">url</span> = git@github.com:fluid-dev/hexo-theme-fluid.git <span class="comment">#新的 URL</span></span><br></pre></td></tr></table></figure><p>然后运行子模块同步命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule <span class="built_in">sync</span></span><br><span class="line">Synchronizing submodule url <span class="keyword">for</span> <span class="string">&#x27;themes/fluid&#x27;</span></span><br></pre></td></tr></table></figure><p>接下来将变更按 git 规范提交即可。当然，也可以用 <code>git submodule set-url</code> 命令来完成，有兴趣的自行摸索。</p><h2 id="删除submodule"><a class="headerlink" href="#删除submodule"></a>删除submodule</h2><p>删除子模块稍微复杂一点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆初始化模块，其中&#123;MOD_NAME&#125;为模块目录，执行后可发现模块目录被清空</span></span><br><span class="line">git submodule deinit &#123;MOD_NAME&#125; </span><br><span class="line"><span class="comment"># 删除.gitmodules中记录的模块信息（--cached选项清除.git/modules中的缓存）</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &#123;MOD_NAME&#125; </span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Administrator@10_0_12_17 MINGW64 ~/Documents/Git/hexoBlog (main)</span><br><span class="line">$ git submodule deinit themes/fluid</span><br><span class="line">$ git <span class="built_in">rm</span> --cached themes/fluid</span><br><span class="line"><span class="built_in">rm</span> <span class="string">&#x27;themes/fluid</span></span><br></pre></td></tr></table></figure><p>命令执行完将 <code>themes/fluid</code> 和 <code>.git/modules/themes/fluid</code> 目录删除，最后提交变更。</p><h2 id="git-submodule-命令总览"><a class="headerlink" href="#git-submodule-命令总览"></a>git submodule 命令总览</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> [<span class="built_in">--cached]</span></span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">add</span> [&lt;<span class="string">options</span>&gt;] [--] &lt;<span class="string">repository</span>&gt; [&lt;<span class="string">path</span>&gt;]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">status</span> [<span class="built_in">--cached]</span> [<span class="built_in">--recursive]</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">init</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">deinit</span> [-<span class="string">f</span>|<span class="built_in">--force]</span> (<span class="built_in">--all|[--]</span> &lt;<span class="string">path</span>&gt;…​)</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">update</span> [&lt;<span class="string">options</span>&gt;] [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="built_in">set-branch</span> [&lt;<span class="string">options</span>&gt;] [--] &lt;<span class="string">path</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="built_in">set-url</span> [--] &lt;<span class="string">path</span>&gt; &lt;<span class="string">newurl</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">summary</span> [&lt;<span class="string">options</span>&gt;] [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">foreach</span> [<span class="built_in">--recursive]</span> &lt;<span class="string">command</span>&gt;</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">sync</span> [<span class="built_in">--recursive]</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br><span class="line"><span class="string">git</span> <span class="string">submodule</span> [<span class="built_in">--quiet]</span> <span class="string">absorbgitdirs</span> [--] [&lt;<span class="string">path</span>&gt;…​]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">项目中经常包含别人维护的模块，在 git 中以子模块的形式引用提交，一些命令总是记不住，往往都是现用现查，干脆整理记录子模块相关的基础命令，懒得反复到处找。</summary>
    
    
    
    <category term="攒知识" scheme="https://sobaigu.com/categories/%E6%94%92%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 及 NPM 依赖插件升级操作</title>
    <link href="https://sobaigu.com/update-hexo-npm-plugins.html"/>
    <id>https://sobaigu.com/update-hexo-npm-plugins.html</id>
    <published>2023-08-23T12:10:00.000Z</published>
    <updated>2023-08-23T12:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>很久前倒腾过<a href="/npm-node-update-self-in-linux.html">Linux环境下npm和node版本升级方法</a>，最近想把一直在用的 Hexo 升级下，居然有点生疏了，再次记录下。</p><h1>升级插件</h1><p>先全局安装 <code>npm-check</code> 和 <code>npm-upgrade</code>：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check <span class="built_in">npm</span>-upgrade</span><br></pre></td></tr></table></figure><p>安装完后，执行 <code>npm-check</code> 即可检查本地各插件版本情况：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm-check</span><br><span class="line"></span><br><span class="line">hexo-deployer-git  😕  NOTUSED?  Still using hexo-deployer-git?</span><br><span class="line">                                Depcheck did <span class="keyword">not</span> find code similar <span class="keyword">to</span> require(&#x27;hexo-deployer-git&#x27;) <span class="keyword">or</span> import <span class="keyword">from</span> &#x27;hexo-deployer-git&#x27;.</span><br><span class="line">                                Check your code <span class="keyword">before</span> removing <span class="keyword">as</span> depcheck <span class="keyword">isn&#x27;t</span> able <span class="keyword">to</span> foresee all ways dependencies can be used.</span><br><span class="line">                                Use rc <span class="built_in">file</span> options <span class="keyword">to</span> remove unused check, <span class="keyword">but</span> still monitor <span class="keyword">for</span> outdated <span class="built_in">version</span>:</span><br><span class="line">                                    .npmcheckrc &#123;<span class="string">&quot;depcheck&quot;</span>: &#123;<span class="string">&quot;ignoreMatches&quot;</span>: [<span class="string">&quot;hexo-deployer-git&quot;</span>]&#125;&#125;</span><br><span class="line">                                Use <span class="comment">--skip-unused to skip this check.</span></span><br><span class="line">                                To remove this package: npm uninstall hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>执行 <code>npm-upgrade</code> 可根据当前版本和最新版本比较，让用户确认和选择是否升级。<br>若用户确认升级，则会自动把 <code>package-lock.json</code> 和 <code>package.json</code> 文件内容进行更新后保存，然后执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">update</span> <span class="operator">-</span>g <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>上述命令执行完毕，则所有通过 <code>npm-upgrade</code> 确认的插件全部都升级到最新。升级完后通过 <code>hexo version</code> 验证 Hexo 版本。</p><h1>指定版本升级</h1><p>如果不想安装升级插件，也可以通过安装指定版本进行插件升级。</p><p>首先可以通过 <code>npm outdate</code> 命令查看有哪些版本，然后通过 <code>npm install package_name@package_version</code> 指定安装对应程序及版本，如果不指定版本，则相当于将指定程序下载最新版本重新安装一遍来实现升级。</p>]]></content>
    
    
    <summary type="html">很久前倒腾过Linux环境下npm和node版本升级方法，最近想把一直在用的 Hexo 升级下，居然有点生疏了，再次记录下。</summary>
    
    
    
    <category term="做网站" scheme="https://sobaigu.com/categories/%E5%81%9A%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://sobaigu.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>XrayR 后端一键对接 V2board 脚本</title>
    <link href="https://sobaigu.com/xrayr-auto-shell-for-v2board.html"/>
    <id>https://sobaigu.com/xrayr-auto-shell-for-v2board.html</id>
    <published>2023-06-06T09:12:50.000Z</published>
    <updated>2024-01-26T10:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>之前有朋友「我也不知道是哪个不知名的网友了」找站长搭过一次 <code>V2board</code> 面板，也接触到了后端 XrayR，然后刚好目睹了脑残硬刚开源作者删库事件，虽然没有对外运营机场，但自己也偶尔需要爬墙头，索性就自个儿弄了个专用机场，关系户找来了也能给开个账号显得高大上！</p><p>也不知道是不是特别受照顾，私人专用机场都隔三差五被墙需要搬家，虽然只有 2 台节点服务器，但对咱这非专业人士需要维护劳动量也是巨大，每次改安装改配置都不能忍，索性就写了个脚本。</p><p>脚本功能虽然不完善，但好歹能用，经常见有人问起这啊那的，干脆把自用的这破程序放出来吧，有缘人自取。</p><blockquote><p>恰饭广告</p><ol><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="另一家虚拟信用卡，手续费相当，更适合美元消费">币圈必备：可以消费 USDC/USDT 的信用卡 - OneKey Card</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Depay">币圈必备：可以消费 USDT 的预付信用卡 - Depay</a></li></ol></blockquote><h1>实现功能</h1><ol><li>一键配置并安装 XrayR</li><li>自动获取面板上指定的节点信息</li><li>自动 CloudFlare 解析节点域名</li><li>每日自动更换节点端口</li></ol><h1>准备条件</h1><p>脚本实现功能时，要求输入：</p><ol><li>V2board/Xboard 面板接口域名和通讯密钥：面板上设置</li><li>V2board/Xboard 面板上指定的节点ID和类型</li><li>V2board/Xboard 面板数据库信息</li><li>CloudFlare 增删改域名解析权限 API Token：去 CloudFlare 控制台添加，具体方法查看 CloudFlare 帮助文档</li></ol><p>因为信息都是固定的，n 年难得变一次，索性偷懒到底，弄个如下一键命令实现信息复用：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> DB_Host=<span class="string">&quot;xx.xx.xx&quot;</span>          <span class="comment">//数据库远程访问地址，记得设置远程访问权限</span></span><br><span class="line"><span class="keyword">export</span> DB_Name=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> DB_User=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> DB_PWD=<span class="string">&quot;xx&quot;</span></span><br><span class="line"><span class="keyword">export</span> Api_Host=<span class="string">&quot;https://xx.xx.xx&quot;</span> <span class="comment">//面板接口，如果不支持https就用http</span></span><br><span class="line"><span class="keyword">export</span> Api_Key=<span class="string">&quot;xx&quot;</span>                <span class="comment">//面板通讯密钥</span></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">CF_TOKEN_DNS</span>=<span class="string">&quot;xx-xx-xx&quot;</span>     <span class="comment">//CloudFlare API Token</span></span><br></pre></td></tr></table></figure><blockquote><p>Xshell 上添加个命令按钮，组合上面这一套命令放一起完成就可以，直接和下方的脚本一起组合到一个按钮里都行</p></blockquote><p>每次运行 <code>xrayR_for_V2board.sh</code> 脚本前运行一遍上面的命令，就可以省去这部分的手动输入，最终就剩下输入节点 <code>ID</code> 和 <code>类型</code> 了。</p><h1>使用</h1><p>SSH 终端登录服务器，运行如下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install -y wget curl</span><br><span class="line">bash &lt;(curl -Ls https:<span class="regexp">//gi</span>thub.com<span class="regexp">/cdnf/</span>shell<span class="regexp">/raw/m</span>aster<span class="regexp">/proxy/</span>xrayR_for_V2board.sh)</span><br></pre></td></tr></table></figure><p>然后就能看到如下选择菜单，按提示完成后续的输入即可。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">======================================</span><br><span class="line">Author: 金三将军</span><br><span class="line">Version: 4.2.5</span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line"><span class="code">1.安装XrayR</span></span><br><span class="line"><span class="code">2.新增nodes</span></span><br><span class="line"><span class="code">3.开启定期更换端口</span></span><br><span class="line"><span class="code">4.开启系统Swap</span></span><br><span class="line"><span class="code">9.卸载XrayR</span></span><br><span class="line"><span class="code">0.退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请输入数字选项: </span><br></pre></td></tr></table></figure><p>选了开启定期更换端口功能后，会将自动更换端口脚本名称添加到系统命令，除每日自动任务运行外，也可以手动运行<code>autoPort</code> 命令即时更换。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@xx</span><span class="symbol">:~</span><span class="comment"># which autoPort </span></span><br><span class="line">/usr/bin/autoPort</span><br><span class="line">root<span class="variable">@xx</span><span class="symbol">:~</span><span class="comment"># cat /etc/crontab</span></span><br><span class="line"><span class="number">30</span> <span class="number">3</span> * * * root autoPort &gt;&gt; <span class="regexp">/dev/null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="支持自动解析和换端口"><a class="headerlink" href="#支持自动解析和换端口"></a>支持自动解析和换端口</h2><p><code>自动域名解析</code> 和 <code>3.开启定期更换端口</code> 功能需要面板数据支持，所以需要在 V2board 面板节点接口 <code>app\Http\Controllers\Server\UniProxyController.php</code> 中额外添加如下信息返回：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line"><span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br></pre></td></tr></table></figure><p>最终代码：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 后端获取配置</span></span><br><span class="line"> public function config(Request $request)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="function"><span class="title">switch</span> ($this-&gt;</span>nodeType) &#123;</span><br><span class="line">         case <span class="string">&#x27;shadowsocks&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;cipher&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher,</span><br><span class="line">                 <span class="string">&#x27;obfs&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>obfs,</span><br><span class="line">                 <span class="string">&#x27;obfs_settings&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>obfs_settings</span><br><span class="line">             ];</span><br><span class="line"></span><br><span class="line">             <span class="function"><span class="title">if</span> ($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher === <span class="string">&#x27;2022-blake3-aes-128-gcm&#x27;</span>) &#123;</span><br><span class="line">                 $<span class="function"><span class="title">response</span>[&#x27;server_key&#x27;] = Helper::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">16</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="function"><span class="title">if</span> ($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>cipher === <span class="string">&#x27;2022-blake3-aes-256-gcm&#x27;</span>) &#123;</span><br><span class="line">                 $<span class="function"><span class="title">response</span>[&#x27;server_key&#x27;] = Helper::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">32</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;vmess&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;network&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>network,</span><br><span class="line">                 <span class="string">&#x27;networkSettings&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>networkSettings,</span><br><span class="line">                 <span class="string">&#x27;tls&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>tls</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;trojan&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;server_name&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_name,</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">         case <span class="string">&#x27;hysteria&#x27;</span>:</span><br><span class="line">             $response = [</span><br><span class="line">                 <span class="string">&#x27;host&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>host,</span><br><span class="line">                 <span class="string">&#x27;port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>port,</span><br><span class="line">                 <span class="string">&#x27;server_port&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_port,</span><br><span class="line">                 <span class="string">&#x27;server_name&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>server_name,</span><br><span class="line">                 <span class="string">&#x27;up_mbps&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>up_mbps,</span><br><span class="line">                 <span class="string">&#x27;down_mbps&#x27;</span> =&gt; $<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>down_mbps,</span><br><span class="line">                 <span class="string">&#x27;obfs&#x27;</span> =&gt; H<span class="function"><span class="title">elper</span>::getServerKey($this-&gt;</span><span class="function"><span class="title">nodeInfo</span>-&gt;</span>created_at, <span class="number">16</span>)</span><br><span class="line">             ];</span><br><span class="line">             break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>后记</h1><p>这是个不完善的 shell，所以有问题也是正常的。如果不爽，自己去改去完善。</p><p>为了这个脚本能称心如意，站长特意去钻研了 jq，有兴趣的可以参考：<a href="/linux-jq-syntax-list.html">常用 linux jq 命令语法整理</a></p>]]></content>
    
    
    <summary type="html">之前有朋友「我也不知道是哪个不知名的网友了」找站长搭过一次 `V2board` 面板，也接触到了后端 XrayR，然后刚好目睹了脑残硬刚开源作者删库事件，虽然没有对外运营机场，但自己也偶尔需要爬墙头，索性就自个儿弄了个专用机场，关系户找来了也能给开个账号显得高大上！
也不知道是不是特别受照顾，私人专用机场都隔三差五被墙需要搬家，虽然只有 2 台节点服务器，但对咱这非专业人士需要维护劳动量也是巨大，每次改安装改配置都不能忍，索性就写了个脚本。
脚本功能虽然不完善，但好歹能用，经常见有人问起这啊那的，干脆把自用的这破程序放出来吧，有缘人自取。</summary>
    
    
    
    <category term="混X圈" scheme="https://sobaigu.com/categories/%E6%B7%B7X%E5%9C%88/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>币圈必备：可以消费 USDC/USDT 的预付信用卡 - OneKey Card</title>
    <link href="https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html"/>
    <id>https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html</id>
    <published>2023-05-12T10:39:59.000Z</published>
    <updated>2024-09-16T01:51:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前介绍过一款 <a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">可以消费 USDT 的虚拟信用卡</a>，支持微信线上购物和支付宝线下小额扫码，但随着用户基数扩大，加之阿麦利卡收紧银行监管，一些数字货币资产也随之列为高风险来源，导致 Dupay/Depay 不定期不可用状态或者低限额，推荐同时备着这个同类型虚拟信用卡 OneKey Card「本币消费只有充值手续费，额度高」。</p><h2 id="简介"><a class="headerlink" href="#简介"></a>简介</h2><blockquote><p>真遗憾，站长认为最靠谱之一的 USDT 消费卡也扛不住了，将于2024年9月30日下线，寄希望 <a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">Dupay/Depay</a> 能争口气续命</p></blockquote><p>OneKey Card 是硬件冷钱包厂商推出的一款虚拟信用卡「官网显示即将有实体卡」，首次开卡默认卡等级为 <code>白银</code>，支持 USDT 和 USDC <code>1:1</code> 充值入金，直接消费 <code>USD</code> 爽歪歪，中国大陆区支持支付宝、微信、拼夕夕、美团等 CNY 消费场景。</p><blockquote><p>现阶段新开卡消费时需要货币转换费，本币消费只有充值手续费，适合 ChatGPT Plus 订阅，openAI付费，国外买服务器域名等直接消费 USD 应用</p></blockquote><table><thead><tr><th>卡片类型</th><th>Visa</th><th>MasterCard</th></tr></thead><tbody><tr><td>卡段</td><td>428836</td><td>556150</td></tr><tr><td>国家/地区</td><td>美国</td><td>印度</td></tr><tr><td>结算费用</td><td>USD（对美国商户的美元交易免收手续费，其他交易类型的费率为 1% + $0.5）</td><td></td></tr></tbody></table><p>和 Depay 相比，整体大同小异，有多地区卡可选择，优选美国卡支持 openAI、ChatGPT Plus、GooglePlay、Amazon 等付款，不想作为主力也可以注册一个作为 Plan B，美元消费无手续费。</p><a href="https://sobaigu.com/mastercad-visa-pay-with-usd-usdc-onekey.html" target="_blank" title="OneKey Card">    <img border="0" height="400" width="auto" src="https://card.onekey.so/_next/static/media/multi_cards_and_transfer.75395586.png" /></a><h2 id="注册认证"><a class="headerlink" href="#注册认证"></a>注册认证</h2><p>打开 <a href="https://card.onekey.so/?i=KKKSV5" title="点击或者注册时填入此授权码才可以">官网注册页</a> 「打不开就上梯子」，点击 【<code>sign in with Google</code>】，用 Google 的账号授权登录。</p><blockquote><p>OneKey Card 注册激活时填入邀请码：<code>KKKSV5</code>，<strong>遇到问题或者有疑问的欢迎评论交流</strong></p></blockquote><p>注册完成后，首先会要求进行认证完成账户激活，按页面提示用微信或浏览器扫码完成一段活体录像认证。</p><blockquote><p>地区<strong>选香港</strong>，即可用大陆身份证或护照完成KYC</p><p>地区<strong>选香港</strong>，即可用大陆身份证或护照完成KYC</p><p>地区<strong>选香港</strong>，即可用大陆身份证或护照完成KYC</p></blockquote><p>激活后，为了账号安全，需要开启谷歌验证码二次认证，安卓谷歌验证器推荐一个免费开源的 <a href="https://github.com/beemdevelopment/Aegis" title="免费开源软件">Aegis</a>，使用教程就懒得写了，直接贴 <a href="https://www.appinn.com/aegis-2fa-for-android/">墙内教程</a>，自行去下载安装使用，iOS 可以参考<a href="https://help.onekey.so/hc/zh-cn/articles/6739716879887" target="_blank" title="OneKey Card 中如何使用谷歌验证码"> OneKey官方帮助中心</a>，或者自行安装对应APP解决。</p><h2 id="充值-USDT-USDC-并兑换-USD"><a class="headerlink" href="#充值-USDT-USDC-并兑换-USD"></a>充值 <code>USDT</code>/<code>USDC</code> 并兑换 <code>USD</code></h2><p>实名认证完成后，点击【<code>Top Up</code>/<code>充值</code>】进行钱包充值，注意选择对应的链别充错了，公测阶段需要 <code>20 USD 以上</code>，建议宁多勿少。</p><p><img src="https://help.onekey.so/hc/article_attachments/7704515686543" alt="钱包充值激活" loading="lazy"></p><p>充值到钱包的 <code>USDT</code>/<code>USDC</code> 还需要兑换成 <code>USD</code> 才能划转到预付费卡进行消费：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559159951" alt="兑换USD" loading="lazy"></p><h2 id="添加卡片"><a class="headerlink" href="#添加卡片"></a>添加卡片</h2><p>充值完成后，回到账户主页，点击左上角 <code>Wallet</code>/<code>钱包</code> 下拉添加卡片，根据您的使用场景选择需要开通的卡片：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559160079" alt="选择需要开通的卡片" title="选择卡片" loading="lazy"></p><p>输入从钱包划转到消费卡的金额，点击 <code>添加卡片</code> 完成开卡：</p><p><img src="https://help.onekey.so/hc/article_attachments/7704559163279" alt="" loading="lazy"></p><p>开卡完成后，点击 【<code>CVV</code>/<code>安全码</code>】，通过二次安全验证后可以查看卡片所有信息。</p><h2 id="绑卡消费"><a class="headerlink" href="#绑卡消费"></a>绑卡消费</h2><p>不管线上还是线下支付需要商家使用的 POS 机支持相应通道（Visa 或 Master），仅支持银联将无法支付。</p><h3 id="绑定支付宝"><a class="headerlink" href="#绑定支付宝"></a>绑定支付宝</h3><ol><li>打开支付宝，点击我的》银行卡</li><li>点击添加银行卡》输入开通的卡号</li><li>输入 姓名、日期、安全码</li><li>绑定完成</li></ol><p><img src="https://help.onekey.so/hc/article_attachments/6762367957775" alt="绑定支付宝" loading="lazy"></p><h3 id="绑定微信"><a class="headerlink" href="#绑定微信"></a>绑定微信</h3><ol><li>打开微信，点击【我】&gt;【服务】》点击【钱包】</li><li>点击【银行卡】》点击 【添加银行卡】》输入支付密码</li><li>输入 <code>OneKey Card</code> 卡号</li><li>添加银行卡信息，账单地址信息根据自己实际情况填写</li><li>点击下一步，完成绑定</li></ol><p><img src="https://help.onekey.so/hc/article_attachments/6763126733327" alt="绑定微信" loading="lazy"></p><p><strong>消费场景的要求</strong></p><ol><li>线下场景：使用微信支付，要看商家使用的POS机是否支持VISA通道，仅支持银联的那种是不行的。（即使支持微信支付，也不一定支持对应卡的通道）</li><li>线上场景：主要是看平台风控的要求，有些账户信誉好、消费频繁等等可能会允许使用，但是有些账户如果风险比较高的话会被风控拒绝。这个是线上商家使用的收单工具和风控的严松决定的。所以：<strong>建议慢慢养卡，首笔别用来充话费之类的虚拟物</strong>，后面就越用就越顺！</li></ol><h2 id="常见问题"><a class="headerlink" href="#常见问题"></a>常见问题</h2><ol><li><p>费用包含哪些？</p><p>以初始银卡为例：充值手续费/法币转换费 2.1% + 月费 1 USD，明面上无其他费用（实际上非本币消费时会额外产生货币转换费，以开卡时显示为准）。</p><blockquote><p>公测期月费 0 USD，充值手续费 1.95%</p></blockquote></li><li><p>支持哪些充值/入金途径？</p><p>以下列出的链可能部分还未支持，以官方充值页面实际支持为准。</p><table><thead><tr><th>币种</th><th>网络</th></tr></thead><tbody><tr><td>USDC</td><td>Avalanche C-Chain、Polygon、Tron、Ethereum、Algorand、valanche、Flow</td></tr><tr><td>USDT（即将支持）</td><td>Avalanche、Polygon、Tron、Ethereum</td></tr></tbody></table><p><code>Ethereum</code> 链转账手续费那叫一个贵（每笔大约11刀），建议用 <code>Avalanche C-Chain</code>（每笔0.8刀）、<code>Polygon</code>、<code>Tron</code>，没有现货的话可以在交易所币币交易后选择对应的链提币，可以看到对应的提币转账手续费。</p></li><li><p>OneKey Card 支持哪些支付场景？</p><table><thead><tr><th>支付渠道</th><th>详情</th></tr></thead><tbody><tr><td>支付宝</td><td>小额订单消费无需额外手续费；超过200元，支付宝收取3%手续费</td></tr><tr><td>淘宝</td><td>绑卡消费，任何金额都会收取 3% 手续费（系淘宝收取）</td></tr><tr><td>微信支付</td><td>京东、拼多多无额外手续费</td></tr><tr><td>美团</td><td>1. 绑定后每次点外卖需要另外输入CVV和有效日期<br> 2. 如果提示暂不支持该银行，直接在下一步输入CVV和有效日期即可</td></tr></tbody></table></li><li><p>当前支付的非中国大陆银行卡存在被盗风险，本次交易暂无法完成</p><p>正如前面提到的建议要养卡。首次使用如果出现风控，可以联系支付渠道客服申诉，跟客服说明情况，无法绑卡或者无法支付，提交 OneKey Card 首页截图，重点是理直气壮告知是本人的虚拟卡，详见<a href="https://help.onekey.so/hc/zh-cn/articles/6797958433039-%E6%94%AF%E4%BB%98%E5%AE%9D-%E5%BE%AE%E4%BF%A1-%E6%94%AF%E4%BB%98%E9%A3%8E%E6%8E%A7%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E-">官方说明</a>。</p></li></ol><p>其他更多请见 <a href="https://help.onekey.so/hc/zh-cn/articles/6726734682511-OneKey-Card-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">官方帮助常见问题</a></p><h2 id="本文关键词"><a class="headerlink" href="#本文关键词"></a>本文关键词</h2><p><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">消费USDT</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDC信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">数字货币信用卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟币出金卡</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">U币消费卡</a>，<a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">ChatGPT会员订阅</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI付费</a>，<a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">美元信用卡</a></p><p><strong>解决的问题</strong>：</p><ol><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">交易所赚的 U币/虚拟货币 怎么安全兑换法币使用？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT/USDC 怎么安全出金？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT/USDC 怎么用于消费？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">去哪搞支持 ChatGPT 会员订阅的外币信用卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">openAI 付费被拒绝这么办？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">虚拟信用卡哪家好？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdc-onekey.html" title="OneKey">USDT/USDC 怎么兑换才不会被冻卡？</a></li><li><a href="/mastercad-visa-pay-with-usd-usdt.html" title="Dupay">虚拟币支付怎么使用？</a></li></ol>]]></content>
    
    
    <summary type="html">OneKey Card 是硬件冷钱包厂商推出的一款虚拟信用卡「官网显示即将有实体卡」，首次开卡默认卡等级为`白银`，支持 USDT 和 USDC `1:1` 充值入金，消费 `USD` 爽歪歪，中国大陆区支持支付宝、微信、拼夕夕、美团等 CNY 消费场景。
和 Depay 相比，整体大同小异，有香港卡可选择，优选美国卡支持 ChatGPT Plus、GooglePlay、Amazon 等付款，不想作为主力也可以注册一个作为 Plan B，美元消费成本低，更适合美元消费。</summary>
    
    
    
    <category term="混X圈" scheme="https://sobaigu.com/categories/%E6%B7%B7X%E5%9C%88/"/>
    
    
    <category term="虚拟币" scheme="https://sobaigu.com/tags/%E8%99%9A%E6%8B%9F%E5%B8%81/"/>
    
  </entry>
  
  <entry>
    <title>shell中的一些特殊字符用法知识</title>
    <link href="https://sobaigu.com/shell-special-symbols.html"/>
    <id>https://sobaigu.com/shell-special-symbols.html</id>
    <published>2023-04-24T03:25:24.000Z</published>
    <updated>2023-04-24T03:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>shell越用越强大，一些特殊字符特殊用法比较难记，好记性不如烂笔头，网上摘抄的，留一份日后学习。很多事情其实是可以很好的处理的，一些小东西还是没必要引入python代码，直接shell自身就可以处理完成。</p><h1><code>$&#123;[#%]&#125;</code> 获取文件名和后缀名</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">f=file.tar.gz</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;f##*.&#125;</span></span></span><br><span class="line">gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$&#123;f%%.*&#125;</span></span></span><br><span class="line">file</span><br></pre></td></tr></table></figure><p>假设我们定义了一个变量为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=/dir1/dir2/dir3/my.file.txt</span><br></pre></td></tr></table></figure><p>可以用 <code>$&#123;&#125;</code> 分别替换得到不同的值：</p><ul><li><code>$&#123;file#*/&#125;</code>：删掉第一个 <code>/</code> 及其左边的字符串：<code>dir1/dir2/dir3/my.file.txt</code></li><li><code>$&#123;file##*/&#125;</code>：删掉最后一个 <code>/</code> 及其左边的字符串：<code>my.file.txt</code></li><li><code>$&#123;file#*.&#125;</code>：删掉第一个 <code>.</code> 及其左边的字符串：<code>file.txt</code></li><li><code>$&#123;file##*.&#125;</code>：删掉最后一个 <code>.</code> 及其左边的字符串：<code>txt</code></li><li><code>$&#123;file%/*&#125;</code>：删掉最后一个 <code>/</code> 及其右边的字符串：<code>/dir1/dir2/dir3</code></li><li><code>$&#123;file%%/*&#125;</code>：删掉第一个 <code>/</code> 及其右边的字符串：空值</li><li><code>$&#123;file%.*&#125;</code>：删掉最后一个 <code>.</code> 及其右边的字符串：<code>/dir1/dir2/dir3/my.file</code></li><li><code>$&#123;file%%.*&#125;</code>：删掉第一个 <code>.</code> 及其右边的字符串：<code>/dir1/dir2/dir3/my</code></li></ul><blockquote><p>记忆的方法为：</p><ul><li><code>#</code> 是去掉左边（键盘上 <code>#</code> 在 <code>$</code> 的左边，从左向右删）</li><li><code>%</code> 是去掉右边（键盘上 <code>%</code> 在 <code>$</code> 的右边，从右向左删）</li><li>单一符号是最小匹配；两个符号是最大匹配</li></ul></blockquote><h1>参考文档</h1><ol><li><a href="https://handerfly.github.io/shell/2019/04/03/shell%E7%BC%96%E7%A8%8B%E5%86%92%E5%8F%B7%E5%8A%A0-%E7%AD%89%E5%8F%B7-%E5%8A%A0%E5%8F%B7-%E5%87%8F%E5%8F%B7-%E9%97%AE%E5%8F%B7/">shell编程：冒号后面跟等号，加号，减号，问号的意义</a></li><li><a href="https://www.runoob.com/w3cnote/shell-special-char.html">Shell 中的特殊字符</a></li></ol>]]></content>
    
    
    <summary type="html">shell越用越强大，一些特殊字符特殊用法比较难记，好记性不如烂笔头，网上摘抄的，留一份日后学习。很多事情其实是可以很好的处理的，一些小东西还是没必要引入python代码，直接shell自身就可以处理完成。</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="shell" scheme="https://sobaigu.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap菜单自动收缩隐藏</title>
    <link href="https://sobaigu.com/bootstrap-navbar-hide-after-scroll-click.html"/>
    <id>https://sobaigu.com/bootstrap-navbar-hide-after-scroll-click.html</id>
    <published>2023-03-21T09:34:37.000Z</published>
    <updated>2023-03-21T09:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>有个姐姐找过来说，她的网站在手机界面下，点开导航菜单后，如果不再次点菜单按钮，导航弹出层就一直杵在那，有点不正常。</p><p>学艺不精，三脚猫功夫以为这是 Bootstrap 某个样式没有应用，可翻来翻去都没发现有滚动屏幕或点击其他区域自动收缩隐藏的功能。Google 后也有人有同样的疑问，说是原来点击菜单链接后菜单不自动收缩居然也是正常的Bootstrap 逻辑，有点不可思议。</p><h1>现象</h1><p><img src="https://images2018.cnblogs.com/blog/1352798/201805/1352798-20180529232002296-632713344.gif" alt="菜单不隐藏" loading="lazy"></p><p>从上图可知，该导航菜单浮层存在以下问题：</p><ol><li>屏幕滚动不会自动收缩</li><li>点击导航链接后不会自动收缩</li><li>点击导航菜单外的空白区域不会自动收缩</li></ol><h1>解决</h1><p>原导航菜单代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;nav-down responsive-nav hidden-lg hidden-md&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- navbutton for mobile --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nav-toggle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navbar-toggle collapsed navbar-nav&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;collapse&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">data-target</span>=<span class="string">&quot;#main-nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;icon-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--/.navbar-header--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-nav&quot;</span> <span class="attr">class</span>=<span class="string">&quot;collapse navbar-collapse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#featured&quot;</span>&gt;</span>Biography<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#projects&quot;</span>&gt;</span>Photo Gallery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#video&quot;</span>&gt;</span>Media<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#blog&quot;</span>&gt;</span>Upcoming Events<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#contact&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;.navbar-nav a&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  $(<span class="variable language_">document</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      $(<span class="string">&quot;#main-nav&quot;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;navbar-collapse collapse&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后效果再次盗图：</p><p><img src="https://images2018.cnblogs.com/blog/1352798/201805/1352798-20180530003343691-361612275.gif" alt="滚动/点击菜单链接/点击其他区域菜单自动隐藏" loading="lazy"></p><h1>参考文档</h1><ol><li><a href="https://www.cnblogs.com/Wudj/p/9108649.html">在小屏幕和手机屏幕下，Bootstrap导航栏的自动折叠隐藏</a></li></ol>]]></content>
    
    
    <summary type="html">有个姐姐找过来说，她的网站在手机界面下，点开导航菜单后，如果不再次点菜单按钮，导航弹出层就一直杵在那，有点不正常。
学艺不精，三脚猫功夫以为这是 Bootstrap 某个样式没有应用，可翻来翻去都没发现有滚动屏幕或点击其他区域自动收缩隐藏的功能。Google 后也有人有同样的疑问，说是原来点击菜单链接后菜单不自动收缩居然也是正常的Bootstrap 逻辑，有点不可思议。</summary>
    
    
    
    <category term="学编程" scheme="https://sobaigu.com/categories/%E5%AD%A6%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="博客建站" scheme="https://sobaigu.com/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
